// Code generated by GoPlay Protocol Extension Generator. DO NOT EDIT.
{%- for ns in namespaces %}
using {{ns}};
{%- endfor %}

namespace GoPlay.Services.Extension.Frontend
{
    public static class ProtocolConsts
    {
        //Protocols
        {%- for item in data %}
        public const string {{item.method}} = "{{item.route}}";
        {%- endfor %}
    
        //Pushes
        {%- for item in pushes %}
        public const string Push_{{item.name}} = "{{item.route}}";
        {%- endfor %}
    }
    
    public static class ClientExtensions
    {
        public static Func<bool> IsConnected;
        public static Func<Task<bool>> Reconnect;
        public static Func<bool> IsLoggined;
        public static Func<Task<bool>> ReLogin;
        public static Func<IDisposable> CreateLoading;

        {% for item in data %}
            {%- assign result = "" -%}
            {%- assign return = "" -%}
            {%- assign return_not_connected = "" -%}
            {%- assign return_not_logined = "" -%}
            {%- assign return_type = "void" -%}
            {%- assign return_generic_param = "Status" -%}
            {%- capture generic_param -%}{{item.return_type}}{%- endcapture -%}
            {%- assign method_params = "" -%}
            {%- assign method = "Notify" -%}
            {%- assign call_params = "" -%}
            {%- if item.return_type != "Status" -%}
                {%- capture return_generic_param -%}(Status, {{item.return_type}}){%- endcapture -%}
            {%- endif -%}
            {%- if item.param_type != null and item.param_type != "" -%}
                {%- capture method_params -%}, {{item.param_type}} arg{% endcapture %}
                {%- capture call_params -%}, arg{% endcapture %}
                {%- if item.return_type != "Status" -%}
                    {%- capture generic_param -%}{{item.param_type}}, {{item.return_type}}{% endcapture %}
                {%- else -%}
                    {%- capture generic_param -%}{{item.param_type}}{% endcapture %}
                {%- endif -%}
            {%- endif -%}
            {%- if item.return_type != "void" -%}
                {%- if item.return_type != "Status" -%}
                    {%- capture return_not_connected %} (new Status
                        {
                            Code = StatusCode.Failed,
                            Message = "NOT_CONNECTED"
                        }, null){%- endcapture %}
                    {%- capture return_not_logined %} (new Status
                        {
                            Code = StatusCode.Failed,
                            Message = "NOT_LOGGINED"
                        }, null){%- endcapture %}
                {%- else -%}
                    {%- capture return_not_connected %} new Status
                        {
                            Code = StatusCode.Failed,
                            Message = "NOT_CONNECTED"
                        }{%- endcapture %}
                    {%- capture return_not_logined %} new Status
                        {
                            Code = StatusCode.Failed,
                            Message = "NOT_LOGGINED"
                        }{%- endcapture %}
                {%- endif -%}
                {%- capture return_type -%}Task<{{return_generic_param}}>{%- endcapture %}
                {%- capture method -%}Request<{{generic_param}}>{%- endcapture %}
                {%- assign result = "var result = await " -%}
                {%- assign return = "return result;" -%}
            {%- endif -%}
        public static async {{return_type}} {{item.method}}(this Client cli{{method_params}}, bool showLoading=false)
        {
            IDisposable win = null;
            if(showLoading && CreateLoading != null) win = CreateLoading();
            if (IsConnected != null && Reconnect != null && !IsConnected())
            {
                if (!await Reconnect())
                {
                    if (showLoading && win != null) win.Dispose();
                    return{{return_not_connected}};
                }
    
                {% if item.is_need_login -%}
                if (IsLoggined != null && ReLogin != null && IsLoggined() && !await ReLogin())
                {
                    if (showLoading && win != null) win.Dispose();
                    return{{return_not_logined}};
                }
                {%- endif %}
            }

            {{result}}cli.{{method}}(ProtocolConsts.{{item.method}}{{call_params}});
            if(showLoading && win != null) win.Dispose();
            {{return}}
        }
    
        {% endfor %}
    }
}