// Code generated by GoPlay Protocol Extension Generator. DO NOT EDIT.
{%- for ns in namespaces -%}
using {{ns}};
{%- endfor -%}
using GoPlay.UI.Window;

namespace GoPlay.Services.Extension.Frontend
{
    public static class ProtocolConsts
    {
        {%- for item in data -%}
        public const string {{item.method}} = "{{item.route}}";
        {%- endfor -%}
        
        {%- for item in pushes -%}
        public const string Push_{{item.name}} = "{{item.route}}";
        {%- endfor -%}
    }

    public static partial class ClientExtensions
    {
        public static Func<bool> IsConnected;
        public static Func<Task<bool>> Reconnect;
        public static Func<bool> IsLoggined;
        public static Func<Task<bool>> ReLogin;
    
        {%- for item in data -%}
            {%- if item.return_type != "void" -%}
                {%- if item.param_type != null and item.param_type != "" -%}
                    {%- if item.return_type != "Status" -%}
        public static async Task<(Status, {{item.return_type}})> {{item.method}}(this Client cli, {{item.param_type}} arg, bool showLoading=true)
        {
            UIFastLoading win = null;
            if(showLoading) win = UIFastLoading.Open();
            if (IsConnected != null && Reconnect != null && !IsConnected())
            {
                if (!await Reconnect())
                {
                    if (showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed,
                        Message = "NOT_CONNECTED"
                    }, null);
                }

            {%- if item.is_need_login -%}
                if (IsLoggined != null && ReLogin != null && IsLoggined() && !await ReLogin())
                {
                    if(showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed, 
                        Message = "NOT_LOGGINED"
                    }, null);
                }    
            {%- endif -%}
            }
        
            var result = await cli.Request<{{item.param_type}}, {{item.return_type}}>(ProtocolConsts.{{item.method}}, arg);
            if(showLoading && win) win.Close();
            return result;
        }
                    {%- else -%}
        public static async Task<Status> {{item.method}}(this Client cli, {{item.param_type}} arg, bool showLoading=true)
        {
            UIFastLoading win = null;
            if(showLoading) win = UIFastLoading.Open();
            if (IsConnected != null && Reconnect != null && !IsConnected())
            {
                if (!await Reconnect())
                {
                    if (showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed,
                        Message = "NOT_CONNECTED"
                    }, null);
                }

            {%- if item.is_need_login -%}
                if (IsLoggined != null && ReLogin != null && IsLoggined() && !await ReLogin())
                {
                    if(showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed, 
                        Message = "NOT_LOGGINED"
                    }, null);
                }    
            {%- endif -%}
            }
        
            var result = await cli.Request<{{item.param_type}}>(ProtocolConsts.{{item.method}}, arg);
            if(showLoading && win) win.Close();
            return result;
        }
                    {%- endif -%}
                {%- else -%}
                    {%- if item.return_type != "Status" -%}
        public static async Task<(Status, {{item.return_type}})> {{item.method}}(this Client cli, bool showLoading=true)
        {
            UIFastLoading win = null;
            if(showLoading) win = UIFastLoading.Open();
            if (IsConnected != null && Reconnect != null && !IsConnected())
            {
                if (!await Reconnect())
                {
                    if (showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed,
                        Message = "NOT_CONNECTED"
                    }, null);
                }

            {%- if item.is_need_login -%}
                if (IsLoggined != null && ReLogin != null && IsLoggined() && !await ReLogin())
                {
                    if(showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed, 
                        Message = "NOT_LOGGINED"
                    }, null);
                }    
            {%- endif -%}
            }
        
            var result = await cli.Request<{{item.param_type}}, {{item.return_type}}>(ProtocolConsts.{{item.method}});
            if(showLoading && win) win.Close();
            return result;
        }
                    {%- else -%}
        public static async Task<Status> {{item.method}}(this Client cli, bool showLoading=true)
        {
            UIFastLoading win = null;
            if(showLoading) win = UIFastLoading.Open();
            if (IsConnected != null && Reconnect != null && !IsConnected())
            {
                if (!await Reconnect())
                {
                    if (showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed,
                        Message = "NOT_CONNECTED"
                    }, null);
                }

            {%- if item.is_need_login -%}
                if (IsLoggined != null && ReLogin != null && IsLoggined() && !await ReLogin())
                {
                    if(showLoading && win) win.Close();
                    return (new Status
                    {
                        Code = StatusCode.Failed, 
                        Message = "NOT_LOGGINED"
                    }, null);
                }    
            {%- endif -%}
            }
        
            var result = await cli.Request<{{item.param_type}}>(ProtocolConsts.{{item.method}});
            if(showLoading && win) win.Close();
            return result;
        }
                    {%- endif -%}
                {%- endif -%}
            {%- else -%}
                {%- if item.param_type != null and item.param_type != "" -%}
        public static async void {{item.method}}(this Client cli, {{item.param_type}} arg, bool showLoading=false)
        {
            UIFastLoading win = null;
            if(showLoading) win = UIFastLoading.Open();
            if (IsConnected != null && Reconnect != null && !IsConnected())
            {
                if (!await Reconnect())
                {
                    if(showLoading && win) win.Close();
                    return;
                }
            {%- if item.is_need_login -%}
                if (IsLoggined != null && ReLogin != null && IsLoggined() && !await ReLogin())
                {
                    if(showLoading && win) win.Close();
                    return;
                }
            {%- endif -%}
            }
        
            cli.Notify(ProtocolConsts.{{item.method}}, arg);
            if(showLoading && win) win.Close();
        }
                {%- else -%}
        public static async void {{item.method}}(this Client cli, bool showLoading=false)
        {
            UIFastLoading win = null;
            if(showLoading) win = UIFastLoading.Open();
            if (IsConnected != null && Reconnect != null && !IsConnected())
            {
                if (!await Reconnect())
                {
                    if(showLoading && win) win.Close();
                    return;
                }
            {%- if item.is_need_login -%}
                if (IsLoggined != null && ReLogin != null && IsLoggined() && !await ReLogin())
                {
                    if(showLoading && win) win.Close();
                    return;
                }
            {%- endif -%}
            }
        
            cli.Notify(ProtocolConsts.{{item.method}});
            if(showLoading && win) win.Close();
        }
                {%- endif -%}
            {%- endif -%}
        
        {%- endfor -%}
    }
}