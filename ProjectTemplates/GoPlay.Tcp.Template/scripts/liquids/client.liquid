// Code generated by GoPlay Protocol Extension Generator. DO NOT EDIT.
import goplay from "goplay-ws";
import { GoPlay } from "goplay-ws/src/pkg.pb";
import { GoPlayProj } from "./pkg.pb";

export default class Goplay extends goplay {
    public static GoPlayProj = GoPlayProj;

    public static Routes = {
    {%- for item in data %}
        "{{item.method}}": "{{item.route}}",
    {%- endfor %}
    };

    public static Pushes = {
    {%- for item in pushes %}
        "{{item.name}}": "{{item.route}}",
    {%- endfor %}
    };

{% for item in data %}
    {%- assign method_params = "" -%}
    {%- assign call_params = ", null" -%}
    {%- assign return_type = "" -%}
    {%- if item.param_type != null and item.param_type != "" -%} 
        {%- capture method_params -%}arg: GoPlayProj.Protocols.{{item.param_type}}{% endcapture %} 
        {%- capture call_params -%}, arg{% endcapture %} 
    {%- endif -%}
    {%- if item.return_type != "Status" -%}
        {%- capture return_type -%}, GoPlayProj.Protocols.{{item.return_type}}{%- endcapture -%}
    {%- endif -%}

{% if item.return_type != "void" %}
    public static async {{item.method}} ({{method_params}}): Promise<{{item.method}}Result> {
        await goplay.connect();
        return goplay.request("{{item.route}}"{{call_params}}{{return_type}});
    }
{% else %}
    public static async {{item.method}}({{method_params}}) {
        await goplay.connect();
        goplay.notify("{{item.route}}"{{call_params}});
    }
{%- endif -%}
{% endfor %}

}

{% for item in data %}
{%- if item.return_type == "Status" %}
interface {{item.method}}Result {
    status: GoPlay.Core.Protocols.Status;
    data: any;
}
{%- elsif item.return_type != "void" %}
interface {{item.method}}Result {
    status: GoPlay.Core.Protocols.Status;
    data: GoPlayProj.Protocols.{{item.return_type}};
}
{%- endif -%}
{%- endfor -%}