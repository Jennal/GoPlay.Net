// Code generated by Excel2Unity. DO NOT EDIT.
// source file: {{data.excel_file}}
// source sheet: {{data.table_name}}

{% for ns in data.namespaces -%}
using {{ns}};
{% endfor %}

namespace GoPlay.Config
{
	/// <summary>
	/// {{data.entity_name}}表单行结构
	///
	{%- for comment in data.table_desc %}
	/// {{comment}}
	{% endfor -%}
	/// </summary>
	[Serializable]
	public partial struct {{data.entity_name}}
	{
		{% for field in data.fields %}
		/// <summary>
		{%- for comment in field.desc %}
		/// {{comment}}
		{% endfor -%}
		/// </summary>
		public {{field.type_name}} {{field.name}};
		{% endfor -%}
		
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("{{data.entity_name}} : { ");
			{% for field in data.fields %}
				{% if field.is_array -%}
			sb.AppendFormat("{{field.name}}: [{0}], ", string.Join(", ", {{field.name}}.Select(o => o.ToString())));
				{%- else -%}
			sb.AppendFormat("{{field.name}}: {0}, ", {{field.name}});
				{%- endif %}
			{%- endfor %}
			sb.Append(" }");
			return sb.ToString();
		}
		
		public override bool Equals(object? obj)
		{
			if (obj == null) return false;
			if (obj is {{data.entity_name}} == false) return false;
			
			var o = ({{data.entity_name}})obj;
			{% for field in data.fields %}
				{% if field.type_name == "float" -%}
					{% if field.is_array -%}
			if ({{field.name}} == null && o.{{field.name}} != null) return false;
			if ({{field.name}} != null && o.{{field.name}} == null) return false;
			if ({{field.name}} != null && o.{{field.name}} != null) {
				if ({{field.name}}.Length != o.{{field.name}}.Length) return false;
				for (var i=0; i<{{field.name}}.Length; i++) {
					if ( ! Mathf.Approximately({{field.name}}[i], o.{{field.name}}[i])) return false;
				}
			}
					{%- else -%}
			if ( ! Mathf.Approximately({{field.name}}, o.{{field.name}})) return false;
					{%- endif %}
				{%- else -%}
					{% if field.is_array -%}
			if ({{field.name}} == null && o.{{field.name}} != null) return false;
			if ({{field.name}} != null && o.{{field.name}} == null) return false;
			if ({{field.name}} != null && o.{{field.name}} != null) {
				if ({{field.name}}.Length != o.{{field.name}}.Length) return false;
				for (var i=0; i<{{field.name}}.Length; i++) {
					if ({{field.name}}[i] != o.{{field.name}}[i]) return false;
				}
			}
					{%- else -%}
			if ({{field.name}} != o.{{field.name}}) return false;
					{%- endif %}
				{%- endif %}
			{%- endfor %}
			
			return true;
		}

		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		public static bool operator ==({{data.entity_name}} lhs, {{data.entity_name}} rhs)
		{
			return lhs.Equals(rhs);
		}

		public static bool operator !=({{data.entity_name}} lhs, {{data.entity_name}} rhs)
		{
			return !lhs.Equals(rhs);
		}
	}
}
