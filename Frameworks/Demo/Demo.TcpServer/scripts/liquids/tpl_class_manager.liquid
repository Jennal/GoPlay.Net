// Code generated by Excel2Unity. DO NOT EDIT.

using System.Collections.Concurrent;
using GoPlay.Common;
using YamlDotNet.Serialization;

namespace GoPlay.Config
{
    public static partial class ConfigData
    {
        public const string DEFAULT_LANGUAGE = "zh_cn";
                
        private static IDeserializer _deserializer = new DeserializerBuilder().Build();
        private static ConcurrentDictionary<string, object> _cache = new ConcurrentDictionary<string, object>();
        private static ConcurrentDictionary<string, bool> _reloadStatus = new ConcurrentDictionary<string, bool>();

        public static List<T> Get<T>(string lang="zh_cn")
        {
            var typeName = typeof(T).Name;
            var path = Path.Combine("Res/Config", lang, $"{typeName}s.asset");

            if (!string.IsNullOrEmpty(RunArgs.ConfigDir))
            {
                var p = Path.Combine(RunArgs.ConfigDir, path);
                if (File.Exists(p)) path = p;
            }
            
            if (!File.Exists(path)) {
                var cmd = Environment.CommandLine.Split(" ", StringSplitOptions.RemoveEmptyEntries);
                var dir = Path.GetDirectoryName(cmd[0]);
                path = Path.Combine(dir, "Res/Config", lang, $"{typeName}s.asset");
            }

            if (!File.Exists(path) && lang != DEFAULT_LANGUAGE)
            {
                return Get<T>(DEFAULT_LANGUAGE);
            }

            if (_reloadStatus.TryGetValue(path, out _) && _cache.TryGetValue(path, out var val)) return (List<T>)val;
            
            var yaml = File.ReadAllText(path);
            var confs = _deserializer.Deserialize<List<T>>(yaml);
            _cache.TryAdd(path, confs);
            _reloadStatus.TryAdd(path, true);

            return confs;
        }
        
        public static void RefreshCache()
        {
            _reloadStatus.Clear();
        }
    }
}
