/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/codegen/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/codegen/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/codegen/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/fetch/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/fetch/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\"),\r\n    inquire   = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/fetch/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/path/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/path/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/path/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./dist/ByteArray.js":
/*!***************************!*\
  !*** ./dist/ByteArray.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteArray: () => (/* binding */ ByteArray),\n/* harmony export */   copyArray: () => (/* binding */ copyArray),\n/* harmony export */   strdecode: () => (/* binding */ strdecode),\n/* harmony export */   strencode: () => (/* binding */ strencode)\n/* harmony export */ });\nfunction strencode(str) {\n  var byteArray = new ByteArray(str.length * 3);\n  var offset = 0;\n  for (var i = 0; i < str.length; i++) {\n    var charCode = str.charCodeAt(i);\n    var codes = null;\n    if (charCode <= 0x7f) {\n      codes = [charCode];\n    } else if (charCode <= 0x7ff) {\n      codes = [0xc0 | charCode >> 6, 0x80 | charCode & 0x3f];\n    } else {\n      codes = [0xe0 | charCode >> 12, 0x80 | (charCode & 0xfc0) >> 6, 0x80 | charCode & 0x3f];\n    }\n    for (var j = 0; j < codes.length; j++) {\n      byteArray.data[offset] = codes[j];\n      ++offset;\n    }\n  }\n  var _buffer = new ByteArray(offset);\n  copyArray(_buffer, 0, byteArray, 0, offset);\n  return _buffer;\n}\n;\nfunction strdecode(buffer) {\n  var bytes = new ByteArray(buffer);\n  var array = [];\n  var offset = 0;\n  var charCode = 0;\n  var end = bytes.length;\n  while (offset < end) {\n    if (bytes.data[offset] < 128) {\n      charCode = bytes.data[offset];\n      offset += 1;\n    } else if (bytes.data[offset] < 224) {\n      charCode = ((bytes.data[offset] & 0x3f) << 6) + (bytes.data[offset + 1] & 0x3f);\n      offset += 2;\n    } else {\n      charCode = ((bytes.data[offset] & 0x0f) << 12) + ((bytes.data[offset + 1] & 0x3f) << 6) + (bytes.data[offset + 2] & 0x3f);\n      offset += 3;\n    }\n    array.push(charCode);\n  }\n  return String.fromCharCode.apply(null, array);\n}\n;\nfunction copyArray(dest, doffset, src, soffset, length) {\n  var result = dest;\n  if (dest.length < doffset + length) {\n    result = new ByteArray(doffset + length);\n    result.woffset = dest.woffset;\n    result.roffset = dest.roffset;\n  }\n  for (var i = 0; i < dest.length; i++) {\n    result.data[i] = dest.data[i];\n  }\n  for (var index = 0; index < length; index++) {\n    result.data[doffset++] = src.data[soffset++];\n  }\n  return result;\n}\nvar ByteArray = function () {\n  function ByteArray(data) {\n    this.woffset = 0;\n    this.roffset = 0;\n    if (data instanceof Uint8Array) {\n      this.data = data;\n    } else if (data instanceof ByteArray) {\n      this.data = new Uint8Array(data.buffer);\n    } else {\n      this.data = new Uint8Array(data);\n    }\n  }\n  Object.defineProperty(ByteArray.prototype, \"buffer\", {\n    get: function get() {\n      return this.data.buffer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ByteArray.prototype, \"length\", {\n    get: function get() {\n      return this.data.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ByteArray.prototype.slice = function (start, end) {\n    return this.data.slice(start, end);\n  };\n  ByteArray.prototype.writeUint8 = function (val) {\n    this.data[this.woffset++] = val & 0xff;\n    return this;\n  };\n  ByteArray.prototype.writeUint16 = function (val) {\n    this.data[this.woffset++] = val & 0xff;\n    this.data[this.woffset++] = val >> 8 & 0xff;\n    return this;\n  };\n  ByteArray.prototype.writeUint32 = function (val) {\n    this.data[this.woffset++] = val & 0xff;\n    this.data[this.woffset++] = val >> 8 & 0xff;\n    this.data[this.woffset++] = val >> 16 & 0xff;\n    this.data[this.woffset++] = val >> 24 & 0xff;\n    return this;\n  };\n  ByteArray.prototype.writeString = function (val) {\n    if (!val || val.length <= 0) return this;\n    var bytes = strencode(val);\n    var result = copyArray(this, this.woffset, bytes, 0, bytes.length);\n    result.woffset = this.woffset + bytes.length;\n    return result;\n  };\n  ByteArray.prototype.writeBytes = function (data) {\n    if (!data || !data.length) return this;\n    var result = copyArray(this, this.woffset, data, 0, data.length);\n    result.woffset = this.woffset + data.length;\n    return result;\n  };\n  ByteArray.prototype.hasReadSize = function (len) {\n    return len <= this.length - this.roffset;\n  };\n  ByteArray.prototype.readUint8 = function () {\n    if (this.roffset + 1 > this.length) return undefined;\n    var val = this.data[this.roffset] & 0xff;\n    this.roffset += 1;\n    return val;\n  };\n  ByteArray.prototype.readUint16 = function () {\n    var l = this.readUint8();\n    var h = this.readUint8();\n    if (h == undefined || l == undefined) return undefined;\n    return h << 8 | l;\n  };\n  ByteArray.prototype.readUint32 = function () {\n    var l = this.readUint16();\n    var h = this.readUint16();\n    if (h == undefined || l == undefined) return undefined;\n    return h << 16 | l;\n  };\n  ByteArray.prototype.readBytes = function (len) {\n    if (!len || len <= 0) return undefined;\n    if (this.roffset + len > this.length) return undefined;\n    var bytes = this.slice(this.roffset, this.roffset + len);\n    this.roffset += len;\n    return new ByteArray(bytes);\n  };\n  ByteArray.prototype.readString = function (len) {\n    var bytes = this.readBytes(len);\n    if (bytes == undefined) return \"\";\n    return strdecode(bytes);\n  };\n  return ByteArray;\n}();\n\n\n//# sourceURL=webpack://goplay.ts/./dist/ByteArray.js?");

/***/ }),

/***/ "./dist/Emitter.js":
/*!*************************!*\
  !*** ./dist/Emitter.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Emitter = function () {\n  function Emitter() {\n    this._callbacks = {};\n    this.on = this.addEventListener;\n    this.addListener = this.addEventListener;\n    this.once = this.addEventListenerOnce;\n    this.addListenerOnce = this.addEventListenerOnce;\n    this.off = this.removeEventListener;\n    this.removeListener = this.removeEventListener;\n  }\n  Object.defineProperty(Emitter.prototype, \"callbacks\", {\n    get: function get() {\n      return this._callbacks;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Emitter.prototype.addEventListener = function (event, fn) {\n    (this._callbacks[event] = this._callbacks[event] || []).push(fn);\n    return this;\n  };\n  Emitter.prototype.addEventListenerOnce = function (event, fn) {\n    var self = this;\n    function on() {\n      self.off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.on(event, on);\n    return this;\n  };\n  Emitter.prototype.removeEventListener = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var event = args[0],\n      fn = args[1];\n    if (1 == args.length) {\n      delete this._callbacks[event];\n      return this;\n    }\n    var callbacks = this._callbacks[event];\n    if (!callbacks) return this;\n    var cb;\n    for (var i = 0; i < callbacks.length; i++) {\n      cb = callbacks[i];\n      if (cb === fn || cb.fn === fn) {\n        callbacks.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n  Emitter.prototype.removeAllListeners = function () {\n    this._callbacks = {};\n    return this;\n  };\n  Emitter.prototype.emit = function (event) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var callbacks = this._callbacks[event];\n    if (callbacks) {\n      callbacks = callbacks.slice(0);\n      for (var i = 0, len = callbacks.length; i < len; ++i) {\n        callbacks[i].apply(this, args);\n      }\n    }\n    return this;\n  };\n  ;\n  Emitter.prototype.listeners = function (event) {\n    return this._callbacks[event] || [];\n  };\n  ;\n  Emitter.prototype.hasListeners = function (event) {\n    return !!this.listeners(event).length;\n  };\n  ;\n  return Emitter;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Emitter);\n\n//# sourceURL=webpack://goplay.ts/./dist/Emitter.js?");

/***/ }),

/***/ "./dist/Encoder.js":
/*!*************************!*\
  !*** ./dist/Encoder.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProtobufEncoder: () => (/* binding */ ProtobufEncoder),\n/* harmony export */   getEncoder: () => (/* binding */ getEncoder)\n/* harmony export */ });\n/* harmony import */ var _ByteArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ByteArray */ \"./dist/ByteArray.js\");\n/* harmony import */ var _pkg_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pkg.pb */ \"./dist/pkg.pb.js\");\n/* harmony import */ var _pkg_pb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_pkg_pb__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar ProtobufEncoder = function () {\n  function ProtobufEncoder() {}\n  ProtobufEncoder.prototype.encode = function (obj) {\n    if (obj == undefined) return obj;\n    if (!obj.constructor || !obj.constructor.encode) throw new Error(\"not a protobuf object!\");\n    return new _ByteArray__WEBPACK_IMPORTED_MODULE_0__.ByteArray(obj.constructor.encode(obj).finish());\n  };\n  ProtobufEncoder.prototype.decode = function (type, bytes) {\n    if (!type.hasOwnProperty('decode')) throw new Error(\"not a protobuf type!\");\n    return type['decode'](bytes.data);\n  };\n  return ProtobufEncoder;\n}();\n\nvar protobufEncoder = new ProtobufEncoder();\nfunction getEncoder(type) {\n  switch (type) {\n    case _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.EncodingType.Protobuf:\n      return protobufEncoder;\n    default:\n      throw new Error(\"not supported encoding type: \".concat(type));\n  }\n}\n\n//# sourceURL=webpack://goplay.ts/./dist/Encoder.js?");

/***/ }),

/***/ "./dist/IdGen.js":
/*!***********************!*\
  !*** ./dist/IdGen.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar IdGen = function () {\n  function IdGen(max) {\n    this.id = 0;\n    this.max = max;\n  }\n  IdGen.prototype.next = function () {\n    if (this.id++ > this.max) {\n      this.id = 0;\n    }\n    return this.id;\n  };\n  return IdGen;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (IdGen);\n\n//# sourceURL=webpack://goplay.ts/./dist/IdGen.js?");

/***/ }),

/***/ "./dist/Package.js":
/*!*************************!*\
  !*** ./dist/Package.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _pkg_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pkg.pb */ \"./dist/pkg.pb.js\");\n/* harmony import */ var _pkg_pb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pkg_pb__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Encoder */ \"./dist/Encoder.js\");\n/* harmony import */ var _ByteArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ByteArray */ \"./dist/ByteArray.js\");\n/* harmony import */ var _IdGen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IdGen */ \"./dist/IdGen.js\");\n\n\n\n\nvar idGen = new _IdGen__WEBPACK_IMPORTED_MODULE_3__[\"default\"](255);\nvar Package = function () {\n  function Package(header, data, rawData) {\n    this.header = header;\n    this.data = data;\n    this.rawData = rawData;\n  }\n  Package.prototype.encode = function () {\n    var _a;\n    var encoder = (0,_Encoder__WEBPACK_IMPORTED_MODULE_1__.getEncoder)(this.header.PackageInfo.EncodingType);\n    if (!this.rawData && this.data) {\n      this.rawData = encoder.encode(this.data);\n    }\n    this.header.PackageInfo.ContentSize = ((_a = this.rawData) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    var headerBytes = encoder.encode(this.header);\n    var bytes = new _ByteArray__WEBPACK_IMPORTED_MODULE_2__.ByteArray(2 + headerBytes.length + this.header.PackageInfo.ContentSize);\n    bytes = bytes.writeUint16(headerBytes.length);\n    bytes = bytes.writeBytes(headerBytes);\n    bytes = bytes.writeBytes(this.rawData);\n    return bytes;\n  };\n  Package.prototype.decodeFromRaw = function (type) {\n    var encoder = (0,_Encoder__WEBPACK_IMPORTED_MODULE_1__.getEncoder)(this.header.PackageInfo.EncodingType);\n    var data = encoder.decode(type, this.rawData);\n    return new Package(this.header, data, this.rawData);\n  };\n  Package.tryDecodeRaw = function (bytes) {\n    var encoder = (0,_Encoder__WEBPACK_IMPORTED_MODULE_1__.getEncoder)(_pkg_pb__WEBPACK_IMPORTED_MODULE_0__.GoPlay.Core.Protocols.EncodingType.Protobuf);\n    if (!bytes.hasReadSize(2)) return null;\n    var headerLength = bytes.readUint16();\n    if (!bytes.hasReadSize(headerLength)) {\n      bytes.roffset -= 2;\n      return null;\n    }\n    var headerBytes = bytes.readBytes(headerLength);\n    var header = encoder.decode(_pkg_pb__WEBPACK_IMPORTED_MODULE_0__.GoPlay.Core.Protocols.Header, headerBytes);\n    if (!bytes.hasReadSize(header.PackageInfo.ContentSize)) {\n      bytes.roffset -= headerLength + 2;\n      return null;\n    }\n    var dataBytes = bytes.readBytes(header.PackageInfo.ContentSize);\n    return new Package(header, null, dataBytes);\n  };\n  Package.decode = function (type, bytes) {\n    var encoder = (0,_Encoder__WEBPACK_IMPORTED_MODULE_1__.getEncoder)(_pkg_pb__WEBPACK_IMPORTED_MODULE_0__.GoPlay.Core.Protocols.EncodingType.Protobuf);\n    var headerLength = bytes.readUint16();\n    var headerBytes = bytes.readBytes(headerLength);\n    var header = encoder.decode(_pkg_pb__WEBPACK_IMPORTED_MODULE_0__.GoPlay.Core.Protocols.Header, headerBytes);\n    encoder = (0,_Encoder__WEBPACK_IMPORTED_MODULE_1__.getEncoder)(header.PackageInfo.EncodingType);\n    var dataBytes = bytes.readBytes(header.PackageInfo.ContentSize);\n    var data = encoder.decode(type, dataBytes);\n    return new Package(header, data, dataBytes);\n  };\n  Package.create = function (header, data) {\n    return new Package(header, data, null);\n  };\n  Package.createRaw = function (header, rawData) {\n    return new Package(header, null, rawData);\n  };\n  Package.createFromData = function (route, data, type, encoding) {\n    var header = new _pkg_pb__WEBPACK_IMPORTED_MODULE_0__.GoPlay.Core.Protocols.Header();\n    header.PackageInfo = new _pkg_pb__WEBPACK_IMPORTED_MODULE_0__.GoPlay.Core.Protocols.PackageInfo();\n    header.PackageInfo.Route = route;\n    header.PackageInfo.EncodingType = encoding;\n    header.PackageInfo.Type = type;\n    header.PackageInfo.Id = idGen.next();\n    return Package.create(header, data);\n  };\n  return Package;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Package);\n\n//# sourceURL=webpack://goplay.ts/./dist/Package.js?");

/***/ }),

/***/ "./dist/TaskCompletionSource.js":
/*!**************************************!*\
  !*** ./dist/TaskCompletionSource.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar TaskCompletionSource = function () {\n  function TaskCompletionSource() {\n    var _this = this;\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n    });\n  }\n  Object.defineProperty(TaskCompletionSource.prototype, \"promise\", {\n    get: function get() {\n      return this._promise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TaskCompletionSource.prototype, \"result\", {\n    set: function set(value) {\n      this._resolve(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TaskCompletionSource;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TaskCompletionSource);\n\n//# sourceURL=webpack://goplay.ts/./dist/TaskCompletionSource.js?");

/***/ }),

/***/ "./dist/goplay.js":
/*!************************!*\
  !*** ./dist/goplay.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var protobufjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs */ \"./node_modules/protobufjs/index.js\");\n/* harmony import */ var protobufjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pkg_pb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pkg.pb */ \"./dist/pkg.pb.js\");\n/* harmony import */ var _pkg_pb__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_pkg_pb__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ByteArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ByteArray */ \"./dist/ByteArray.js\");\n/* harmony import */ var _Emitter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Emitter */ \"./dist/Emitter.js\");\n/* harmony import */ var _TaskCompletionSource__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TaskCompletionSource */ \"./dist/TaskCompletionSource.js\");\n/* harmony import */ var _Package__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Package */ \"./dist/Package.js\");\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = undefined && undefined.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\n\n\nvar WebSocket;\nif (typeof window === 'undefined') {\n  WebSocket = __webpack_require__(/*! ws */ \"./node_modules/ws/browser.js\");\n} else {\n  WebSocket = window.WebSocket;\n  window['$protobuf'] = protobufjs__WEBPACK_IMPORTED_MODULE_0__;\n  window['GoPlay'] = protobufjs__WEBPACK_IMPORTED_MODULE_0__.roots[\"default\"]['GoPlay'];\n}\nvar Consts = {\n  Info: {\n    \"ClientType\": \"GoPlay/Javascript\",\n    \"ClientVersion\": \"0.1\"\n  },\n  Events: {\n    \"CONNECTED\": \"__ON_CONNECTED\",\n    \"DISCONNECTED\": \"__ON_DISCONNECTED\",\n    \"ERROR\": \"__ON_ERROR\",\n    \"KICKED\": \"__ON_KICKED\"\n  },\n  TimeOut: {\n    \"CONNECT\": 3000,\n    \"HEARTBEAT\": 3000,\n    \"MAX_TIMEOUT\": 3,\n    \"REQUEST\": 3000\n  }\n};\nvar goplay = function () {\n  function goplay() {}\n  goplay.emit = function (event) {\n    var _a;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    (_a = goplay.emitter).emit.apply(_a, __spreadArray([event], args, false));\n  };\n  goplay.on = function (event, fn) {\n    goplay.emitter.on(event, fn);\n  };\n  goplay.off = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    (_a = goplay.emitter).off.apply(_a, args);\n  };\n  goplay.once = function (event, fn) {\n    goplay.emitter.once(event, fn);\n  };\n  goplay.listeners = function (event) {\n    return goplay.emitter.listeners(event);\n  };\n  goplay.hasListeners = function (event) {\n    return goplay.emitter.hasListeners(event);\n  };\n  goplay.removeAllListeners = function () {\n    goplay.emitter.removeAllListeners();\n  };\n  Object.defineProperty(goplay, \"isConnected\", {\n    get: function get() {\n      if (!goplay.ws) return false;\n      if (goplay.ws.readyState > 1) return false;\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  goplay.connect = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ws;\n      return __generator(this, function (_a) {\n        if (goplay.isConnected && goplay.url == url) return [2];\n        if (goplay.isConnected && goplay.url != url) goplay.disconnect();\n        ws = new WebSocket(url);\n        ws.binaryType = \"arraybuffer\";\n        ws.onopen = goplay.onopen;\n        ws.onmessage = goplay.onmessage;\n        ws.onerror = goplay.onerror;\n        ws.onclose = goplay.onclose;\n        goplay.ws = ws;\n        goplay.connectTask = new _TaskCompletionSource__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        goplay.connectTimeOutId = setTimeout(function () {\n          if (goplay.isConnected) return;\n          if (!goplay.connectTask) return;\n          goplay.connectTask.result = false;\n        }, Consts.TimeOut.CONNECT);\n        return [2, goplay.connectTask.promise];\n      });\n    });\n  };\n  goplay.disconnect = function () {\n    if (!goplay.ws) return;\n    if (goplay.ws.readyState <= 1) goplay.ws.close();\n    goplay.ws = null;\n    goplay.emit(Consts.Events.DISCONNECTED);\n  };\n  goplay.send = function (pack) {\n    var data = pack.encode();\n    var buffer = new _ByteArray__WEBPACK_IMPORTED_MODULE_2__.ByteArray(2);\n    buffer.writeUint16(data.length);\n    goplay.ws.send(buffer.data);\n    goplay.ws.send(data.data);\n  };\n  goplay.recv = function () {\n    if (!goplay.buffer || !goplay.buffer.length) return null;\n    if (!goplay.buffer.hasReadSize(2)) return null;\n    var packSize = goplay.buffer.readUint16();\n    if (!goplay.buffer.hasReadSize(packSize)) {\n      goplay.buffer.roffset -= 2;\n      return null;\n    }\n    var data = goplay.buffer.readBytes(packSize);\n    var pack = _Package__WEBPACK_IMPORTED_MODULE_5__[\"default\"].tryDecodeRaw(data);\n    return pack;\n  };\n  goplay.onopen = function (event) {\n    console.log(\"onopen\", event);\n    goplay.sendHandshake();\n  };\n  goplay.onmessage = function (event) {\n    var data = new _ByteArray__WEBPACK_IMPORTED_MODULE_2__.ByteArray(event.data);\n    if (!goplay.buffer) {\n      goplay.buffer = data;\n      goplay.buffer.woffset = data.length;\n    } else {\n      goplay.buffer = goplay.buffer.writeBytes(data);\n    }\n    var pack = goplay.recv();\n    if (!pack) return;\n    var header = pack.header;\n    if (header.PackageInfo.Type != _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Ping && header.PackageInfo.Type != _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Pong) {\n      console.log(\"Recv: \", header, data);\n    }\n    switch (header.PackageInfo.Type) {\n      case _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Response:\n        goplay.onResponse(pack);\n        break;\n      case _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Push:\n        goplay.onPush(pack);\n        break;\n      case _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Ping:\n        pack.header.PackageInfo.Type = _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Pong;\n        goplay.send(pack);\n        break;\n      case _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Pong:\n        goplay.onHeartbeat(pack);\n        break;\n      case _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.HankShakeResp:\n        goplay.onHandshake(pack);\n        break;\n      case _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Kick:\n        goplay.onKick(pack);\n        break;\n      default:\n        console.log(\"should not be here!!\", pack);\n        break;\n    }\n  };\n  goplay.onerror = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    console.log(\"onerror\", args);\n    goplay.emit.apply(goplay, __spreadArray([Consts.Events.ERROR], args, false));\n  };\n  goplay.onclose = function (event) {\n    console.log(\"onclose\", event);\n    HeartBeat.stop();\n    goplay.disconnect();\n  };\n  goplay.getRouteEncoded = function (route) {\n    if (!goplay.handShake) return 0;\n    if (goplay.handShake.Routes.hasOwnProperty(route)) {\n      return goplay.handShake.Routes[route];\n    }\n    return 0;\n  };\n  goplay.getRoute = function (routeEncoded) {\n    if (!goplay.handShake) return \"\";\n    for (var key in goplay.handShake.Routes) {\n      if (goplay.handShake.Routes.hasOwnProperty(key)) {\n        if (routeEncoded == goplay.handShake.Routes[key]) {\n          return key;\n        }\n      }\n    }\n    return \"\";\n  };\n  goplay.sendHandshake = function () {\n    var data = new _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.ReqHankShake();\n    data.ClientVersion = Consts.Info.ClientVersion;\n    data.ServerTag = _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.ServerTag.FrontEnd;\n    var pack = _Package__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createFromData(0, data, _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.HankShakeReq, goplay.encodingType);\n    goplay.send(pack);\n  };\n  goplay.onHandshake = function (p) {\n    var pack = p.decodeFromRaw(_pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.RespHandShake);\n    goplay.handShake = pack.data;\n    HeartBeat.start(goplay.handShake.HeartBeatInterval);\n    goplay.emit(Consts.Events.CONNECTED);\n    goplay.connectTask.result = true;\n    clearTimeout(goplay.connectTimeOutId);\n  };\n  goplay.onHeartbeat = function (p) {\n    HeartBeat.clearKey(p.header.PackageInfo.Id);\n  };\n  goplay.onResponse = function (p) {\n    var key = goplay.getCallbackKey(p.header);\n    console.log(\"key: \", key);\n    console.log(\"onResponse: \", p);\n    var type = goplay.requestMap[key];\n    if (type) {\n      delete goplay.requestMap[key];\n      var pack = p.decodeFromRaw(type);\n      goplay.emit(key, {\n        status: p.header.Status,\n        data: pack.data\n      });\n    } else {\n      goplay.emit(key, {\n        status: p.header.Status,\n        data: p.rawData\n      });\n    }\n  };\n  goplay.onPush = function (p) {\n    var key = goplay.getCallbackKey(p.header);\n    console.log(\"key: \", key);\n    console.log(\"onPush: \", p);\n    var type = goplay.pushMap[key];\n    if (type) {\n      var pack = p.decodeFromRaw(type);\n      goplay.emit(key, {\n        status: p.header.Status,\n        data: pack.data\n      });\n    } else {\n      goplay.emit(key, {\n        status: p.header.Status,\n        data: p.rawData\n      });\n    }\n  };\n  goplay.onKick = function (p) {\n    goplay.emit(Consts.Events.KICKED);\n    goplay.disconnect();\n  };\n  goplay.getCallbackKey = function (header) {\n    return \"\".concat(header.PackageInfo.Route, \"-\").concat(header.PackageInfo.Id);\n  };\n  goplay.onType = function (event, type, fn) {\n    if (goplay.pushMap[event] && goplay.pushMap[event] != type) throw new Error(\"event \".concat(event, \" already registered with type \").concat(goplay.pushMap[event]));\n    goplay.pushMap[event] = type;\n    goplay.emitter.on(event, fn);\n  };\n  goplay.onceType = function (event, type, fn) {\n    if (goplay.pushMap[event] && goplay.pushMap[event] != type) throw new Error(\"event \".concat(event, \" already registered with type \").concat(goplay.pushMap[event]));\n    goplay.pushMap[event] = type;\n    goplay.emitter.once(event, fn);\n  };\n  goplay.request = function (route, data, resultType) {\n    var task = new _TaskCompletionSource__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n    var pack = _Package__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createFromData(goplay.getRouteEncoded(route), data, _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Request, goplay.encodingType);\n    var key = goplay.getCallbackKey(pack.header);\n    goplay.requestMap[key] = resultType;\n    var timeOutId = setTimeout(function () {\n      var status = new _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.Status();\n      status.Code = _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.StatusCode.Timeout;\n      status.Message = \"request time out\";\n      var result = {\n        status: status,\n        data: null\n      };\n      goplay.emit(key, result);\n    }, Consts.TimeOut.REQUEST);\n    goplay.once(key, function (result) {\n      clearTimeout(timeOutId);\n      task.result = result;\n    });\n    goplay.send(pack);\n    return task.promise;\n  };\n  goplay.notify = function (route, data) {\n    var pack = _Package__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createFromData(goplay.getRouteEncoded(route), data, _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Notify, goplay.encodingType);\n    goplay.send(pack);\n  };\n  goplay.Consts = Consts;\n  goplay.encodingType = _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.EncodingType.Protobuf;\n  goplay.emitter = new _Emitter__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n  goplay.requestMap = {};\n  goplay.pushMap = {};\n  return goplay;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (goplay);\nvar HeartBeat = function () {\n  function HeartBeat() {}\n  HeartBeat.start = function (interval) {\n    if (interval === void 0) {\n      interval = 10000;\n    }\n    if (HeartBeat.intervalId) return;\n    interval = interval || HeartBeat.interval;\n    HeartBeat.intervalId = setInterval(function () {\n      var pack = _Package__WEBPACK_IMPORTED_MODULE_5__[\"default\"].createFromData(0, null, _pkg_pb__WEBPACK_IMPORTED_MODULE_1__.GoPlay.Core.Protocols.PackageType.Ping, goplay.encodingType);\n      goplay.send(pack);\n      HeartBeat.timeOutMap[pack.header.PackageInfo.Id] = setTimeout(function () {\n        HeartBeat.timeOutCount++;\n        if (HeartBeat.timeOutCount > Consts.TimeOut.MAX_TIMEOUT) {\n          console.log(\"heartbeat timeout count > \" + Consts.TimeOut.MAX_TIMEOUT);\n          goplay.disconnect();\n        }\n      }, Consts.TimeOut.HEARTBEAT);\n    }, HeartBeat.interval);\n  };\n  HeartBeat.clearKey = function (key) {\n    if (!HeartBeat.timeOutMap.hasOwnProperty(key)) return;\n    var timeOutId = HeartBeat.timeOutMap[key];\n    clearTimeout(timeOutId);\n    delete HeartBeat.timeOutMap[key];\n  };\n  HeartBeat.stop = function () {\n    if (!HeartBeat.intervalId) return;\n    clearInterval(HeartBeat.intervalId);\n    HeartBeat.intervalId = null;\n    for (var key in HeartBeat.timeOutMap) {\n      HeartBeat.clearKey(key);\n    }\n  };\n  HeartBeat.interval = 10000;\n  HeartBeat.timeOutMap = {};\n  HeartBeat.timeOutCount = 0;\n  return HeartBeat;\n}();\nif (typeof window !== 'undefined') {\n  window['goplay'] = goplay;\n}\n\n//# sourceURL=webpack://goplay.ts/./dist/goplay.js?");

/***/ }),

/***/ "./dist/pkg.pb.js":
/*!************************!*\
  !*** ./dist/pkg.pb.js ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n$root.GoPlay = function () {\n  /**\n   * Namespace GoPlay.\n   * @exports GoPlay\n   * @namespace\n   */\n  var GoPlay = {};\n  GoPlay.Core = function () {\n    /**\n     * Namespace Core.\n     * @memberof GoPlay\n     * @namespace\n     */\n    var Core = {};\n    Core.Protocols = function () {\n      /**\n       * Namespace Protocols.\n       * @memberof GoPlay.Core\n       * @namespace\n       */\n      var Protocols = {};\n      Protocols.PbAny = function () {\n        /**\n         * Properties of a PbAny.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbAny\n         * @property {google.protobuf.IAny|null} [Value] PbAny Value\n         */\n\n        /**\n         * Constructs a new PbAny.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbAny.\n         * @implements IPbAny\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbAny=} [properties] Properties to set\n         */\n        function PbAny(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbAny Value.\n         * @member {google.protobuf.IAny|null|undefined} Value\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @instance\n         */\n        PbAny.prototype.Value = null;\n\n        /**\n         * Creates a new PbAny instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbAny=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbAny} PbAny instance\n         */\n        PbAny.create = function create(properties) {\n          return new PbAny(properties);\n        };\n\n        /**\n         * Encodes the specified PbAny message. Does not implicitly {@link GoPlay.Core.Protocols.PbAny.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbAny} message PbAny message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbAny.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && Object.hasOwnProperty.call(message, \"Value\")) $root.google.protobuf.Any.encode(message.Value, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbAny message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbAny.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbAny} message PbAny message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbAny.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbAny message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbAny} PbAny\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbAny.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbAny();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Value = $root.google.protobuf.Any.decode(reader, reader.uint32());\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbAny message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbAny} PbAny\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbAny.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbAny message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbAny.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) {\n            var error = $root.google.protobuf.Any.verify(message.Value);\n            if (error) return \"Value.\" + error;\n          }\n          return null;\n        };\n\n        /**\n         * Creates a PbAny message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbAny} PbAny\n         */\n        PbAny.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbAny) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbAny();\n          if (object.Value != null) {\n            if (_typeof(object.Value) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.PbAny.Value: object expected\");\n            message.Value = $root.google.protobuf.Any.fromObject(object.Value);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbAny message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {GoPlay.Core.Protocols.PbAny} message PbAny\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbAny.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) object.Value = null;\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) object.Value = $root.google.protobuf.Any.toObject(message.Value, options);\n          return object;\n        };\n\n        /**\n         * Converts this PbAny to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbAny.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbAny\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbAny\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbAny.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbAny\";\n        };\n        return PbAny;\n      }();\n      Protocols.PbTime = function () {\n        /**\n         * Properties of a PbTime.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbTime\n         * @property {google.protobuf.ITimestamp|null} [Value] PbTime Value\n         */\n\n        /**\n         * Constructs a new PbTime.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbTime.\n         * @implements IPbTime\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbTime=} [properties] Properties to set\n         */\n        function PbTime(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbTime Value.\n         * @member {google.protobuf.ITimestamp|null|undefined} Value\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @instance\n         */\n        PbTime.prototype.Value = null;\n\n        /**\n         * Creates a new PbTime instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbTime=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbTime} PbTime instance\n         */\n        PbTime.create = function create(properties) {\n          return new PbTime(properties);\n        };\n\n        /**\n         * Encodes the specified PbTime message. Does not implicitly {@link GoPlay.Core.Protocols.PbTime.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbTime} message PbTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbTime.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && Object.hasOwnProperty.call(message, \"Value\")) $root.google.protobuf.Timestamp.encode(message.Value, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbTime message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbTime.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbTime} message PbTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbTime.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbTime message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbTime} PbTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbTime.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbTime();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Value = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbTime message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbTime} PbTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbTime.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbTime message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbTime.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.Value);\n            if (error) return \"Value.\" + error;\n          }\n          return null;\n        };\n\n        /**\n         * Creates a PbTime message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbTime} PbTime\n         */\n        PbTime.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbTime) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbTime();\n          if (object.Value != null) {\n            if (_typeof(object.Value) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.PbTime.Value: object expected\");\n            message.Value = $root.google.protobuf.Timestamp.fromObject(object.Value);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbTime message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {GoPlay.Core.Protocols.PbTime} message PbTime\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbTime.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) object.Value = null;\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) object.Value = $root.google.protobuf.Timestamp.toObject(message.Value, options);\n          return object;\n        };\n\n        /**\n         * Converts this PbTime to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbTime.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbTime\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbTime\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbTime.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbTime\";\n        };\n        return PbTime;\n      }();\n      Protocols.PbString = function () {\n        /**\n         * Properties of a PbString.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbString\n         * @property {string|null} [Value] PbString Value\n         */\n\n        /**\n         * Constructs a new PbString.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbString.\n         * @implements IPbString\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbString=} [properties] Properties to set\n         */\n        function PbString(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbString Value.\n         * @member {string} Value\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @instance\n         */\n        PbString.prototype.Value = \"\";\n\n        /**\n         * Creates a new PbString instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbString=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbString} PbString instance\n         */\n        PbString.create = function create(properties) {\n          return new PbString(properties);\n        };\n\n        /**\n         * Encodes the specified PbString message. Does not implicitly {@link GoPlay.Core.Protocols.PbString.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbString} message PbString message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbString.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && Object.hasOwnProperty.call(message, \"Value\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.Value);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbString message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbString.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbString} message PbString message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbString.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbString message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbString} PbString\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbString.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbString();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Value = reader.string();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbString message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbString} PbString\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbString.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbString message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbString.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) if (!$util.isString(message.Value)) return \"Value: string expected\";\n          return null;\n        };\n\n        /**\n         * Creates a PbString message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbString} PbString\n         */\n        PbString.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbString) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbString();\n          if (object.Value != null) message.Value = String(object.Value);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbString message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {GoPlay.Core.Protocols.PbString} message PbString\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbString.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) object.Value = \"\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) object.Value = message.Value;\n          return object;\n        };\n\n        /**\n         * Converts this PbString to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbString.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbString\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbString\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbString.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbString\";\n        };\n        return PbString;\n      }();\n      Protocols.PbInt = function () {\n        /**\n         * Properties of a PbInt.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbInt\n         * @property {number|null} [Value] PbInt Value\n         */\n\n        /**\n         * Constructs a new PbInt.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbInt.\n         * @implements IPbInt\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbInt=} [properties] Properties to set\n         */\n        function PbInt(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbInt Value.\n         * @member {number} Value\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @instance\n         */\n        PbInt.prototype.Value = 0;\n\n        /**\n         * Creates a new PbInt instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbInt=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbInt} PbInt instance\n         */\n        PbInt.create = function create(properties) {\n          return new PbInt(properties);\n        };\n\n        /**\n         * Encodes the specified PbInt message. Does not implicitly {@link GoPlay.Core.Protocols.PbInt.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbInt} message PbInt message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbInt.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && Object.hasOwnProperty.call(message, \"Value\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.Value);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbInt message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbInt.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbInt} message PbInt message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbInt.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbInt message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbInt} PbInt\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbInt.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbInt();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Value = reader.int32();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbInt message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbInt} PbInt\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbInt.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbInt message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbInt.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) if (!$util.isInteger(message.Value)) return \"Value: integer expected\";\n          return null;\n        };\n\n        /**\n         * Creates a PbInt message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbInt} PbInt\n         */\n        PbInt.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbInt) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbInt();\n          if (object.Value != null) message.Value = object.Value | 0;\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbInt message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {GoPlay.Core.Protocols.PbInt} message PbInt\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbInt.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) object.Value = 0;\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) object.Value = message.Value;\n          return object;\n        };\n\n        /**\n         * Converts this PbInt to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbInt.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbInt\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbInt\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbInt.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbInt\";\n        };\n        return PbInt;\n      }();\n      Protocols.PbLong = function () {\n        /**\n         * Properties of a PbLong.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbLong\n         * @property {number|Long|null} [Value] PbLong Value\n         */\n\n        /**\n         * Constructs a new PbLong.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbLong.\n         * @implements IPbLong\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbLong=} [properties] Properties to set\n         */\n        function PbLong(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbLong Value.\n         * @member {number|Long} Value\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @instance\n         */\n        PbLong.prototype.Value = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n        /**\n         * Creates a new PbLong instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbLong=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbLong} PbLong instance\n         */\n        PbLong.create = function create(properties) {\n          return new PbLong(properties);\n        };\n\n        /**\n         * Encodes the specified PbLong message. Does not implicitly {@link GoPlay.Core.Protocols.PbLong.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbLong} message PbLong message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbLong.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && Object.hasOwnProperty.call(message, \"Value\")) writer.uint32( /* id 1, wireType 0 =*/8).int64(message.Value);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbLong message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbLong.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbLong} message PbLong message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbLong.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbLong message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbLong} PbLong\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbLong.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbLong();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Value = reader.int64();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbLong message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbLong} PbLong\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbLong.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbLong message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbLong.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) if (!$util.isInteger(message.Value) && !(message.Value && $util.isInteger(message.Value.low) && $util.isInteger(message.Value.high))) return \"Value: integer|Long expected\";\n          return null;\n        };\n\n        /**\n         * Creates a PbLong message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbLong} PbLong\n         */\n        PbLong.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbLong) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbLong();\n          if (object.Value != null) if ($util.Long) (message.Value = $util.Long.fromValue(object.Value)).unsigned = false;else if (typeof object.Value === \"string\") message.Value = parseInt(object.Value, 10);else if (typeof object.Value === \"number\") message.Value = object.Value;else if (_typeof(object.Value) === \"object\") message.Value = new $util.LongBits(object.Value.low >>> 0, object.Value.high >>> 0).toNumber();\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbLong message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {GoPlay.Core.Protocols.PbLong} message PbLong\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbLong.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) if ($util.Long) {\n            var _long = new $util.Long(0, 0, false);\n            object.Value = options.longs === String ? _long.toString() : options.longs === Number ? _long.toNumber() : _long;\n          } else object.Value = options.longs === String ? \"0\" : 0;\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) if (typeof message.Value === \"number\") object.Value = options.longs === String ? String(message.Value) : message.Value;else object.Value = options.longs === String ? $util.Long.prototype.toString.call(message.Value) : options.longs === Number ? new $util.LongBits(message.Value.low >>> 0, message.Value.high >>> 0).toNumber() : message.Value;\n          return object;\n        };\n\n        /**\n         * Converts this PbLong to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbLong.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbLong\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbLong\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbLong.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbLong\";\n        };\n        return PbLong;\n      }();\n      Protocols.PbFloat = function () {\n        /**\n         * Properties of a PbFloat.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbFloat\n         * @property {number|null} [Value] PbFloat Value\n         */\n\n        /**\n         * Constructs a new PbFloat.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbFloat.\n         * @implements IPbFloat\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbFloat=} [properties] Properties to set\n         */\n        function PbFloat(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbFloat Value.\n         * @member {number} Value\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @instance\n         */\n        PbFloat.prototype.Value = 0;\n\n        /**\n         * Creates a new PbFloat instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbFloat=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbFloat} PbFloat instance\n         */\n        PbFloat.create = function create(properties) {\n          return new PbFloat(properties);\n        };\n\n        /**\n         * Encodes the specified PbFloat message. Does not implicitly {@link GoPlay.Core.Protocols.PbFloat.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbFloat} message PbFloat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbFloat.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && Object.hasOwnProperty.call(message, \"Value\")) writer.uint32( /* id 1, wireType 5 =*/13)[\"float\"](message.Value);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbFloat message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbFloat.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbFloat} message PbFloat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbFloat.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbFloat message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbFloat} PbFloat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbFloat.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbFloat();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Value = reader[\"float\"]();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbFloat message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbFloat} PbFloat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbFloat.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbFloat message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbFloat.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) if (typeof message.Value !== \"number\") return \"Value: number expected\";\n          return null;\n        };\n\n        /**\n         * Creates a PbFloat message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbFloat} PbFloat\n         */\n        PbFloat.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbFloat) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbFloat();\n          if (object.Value != null) message.Value = Number(object.Value);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbFloat message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {GoPlay.Core.Protocols.PbFloat} message PbFloat\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbFloat.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) object.Value = 0;\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) object.Value = options.json && !isFinite(message.Value) ? String(message.Value) : message.Value;\n          return object;\n        };\n\n        /**\n         * Converts this PbFloat to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbFloat.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbFloat\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbFloat\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbFloat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbFloat\";\n        };\n        return PbFloat;\n      }();\n      Protocols.PbBool = function () {\n        /**\n         * Properties of a PbBool.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbBool\n         * @property {boolean|null} [Value] PbBool Value\n         */\n\n        /**\n         * Constructs a new PbBool.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbBool.\n         * @implements IPbBool\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbBool=} [properties] Properties to set\n         */\n        function PbBool(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbBool Value.\n         * @member {boolean} Value\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @instance\n         */\n        PbBool.prototype.Value = false;\n\n        /**\n         * Creates a new PbBool instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbBool=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbBool} PbBool instance\n         */\n        PbBool.create = function create(properties) {\n          return new PbBool(properties);\n        };\n\n        /**\n         * Encodes the specified PbBool message. Does not implicitly {@link GoPlay.Core.Protocols.PbBool.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbBool} message PbBool message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbBool.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && Object.hasOwnProperty.call(message, \"Value\")) writer.uint32( /* id 1, wireType 0 =*/8).bool(message.Value);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbBool message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbBool.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbBool} message PbBool message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbBool.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbBool message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbBool} PbBool\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbBool.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbBool();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Value = reader.bool();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbBool message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbBool} PbBool\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbBool.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbBool message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbBool.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) if (typeof message.Value !== \"boolean\") return \"Value: boolean expected\";\n          return null;\n        };\n\n        /**\n         * Creates a PbBool message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbBool} PbBool\n         */\n        PbBool.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbBool) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbBool();\n          if (object.Value != null) message.Value = Boolean(object.Value);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbBool message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {GoPlay.Core.Protocols.PbBool} message PbBool\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbBool.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) object.Value = false;\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) object.Value = message.Value;\n          return object;\n        };\n\n        /**\n         * Converts this PbBool to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbBool.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbBool\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbBool\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbBool.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbBool\";\n        };\n        return PbBool;\n      }();\n      Protocols.PbStringArray = function () {\n        /**\n         * Properties of a PbStringArray.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbStringArray\n         * @property {Array.<string>|null} [Value] PbStringArray Value\n         */\n\n        /**\n         * Constructs a new PbStringArray.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbStringArray.\n         * @implements IPbStringArray\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbStringArray=} [properties] Properties to set\n         */\n        function PbStringArray(properties) {\n          this.Value = [];\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbStringArray Value.\n         * @member {Array.<string>} Value\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @instance\n         */\n        PbStringArray.prototype.Value = $util.emptyArray;\n\n        /**\n         * Creates a new PbStringArray instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbStringArray=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbStringArray} PbStringArray instance\n         */\n        PbStringArray.create = function create(properties) {\n          return new PbStringArray(properties);\n        };\n\n        /**\n         * Encodes the specified PbStringArray message. Does not implicitly {@link GoPlay.Core.Protocols.PbStringArray.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbStringArray} message PbStringArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbStringArray.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && message.Value.length) for (var i = 0; i < message.Value.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).string(message.Value[i]);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbStringArray message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbStringArray.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbStringArray} message PbStringArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbStringArray.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbStringArray message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbStringArray} PbStringArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbStringArray.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbStringArray();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  if (!(message.Value && message.Value.length)) message.Value = [];\n                  message.Value.push(reader.string());\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbStringArray message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbStringArray} PbStringArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbStringArray.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbStringArray message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbStringArray.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) {\n            if (!Array.isArray(message.Value)) return \"Value: array expected\";\n            for (var i = 0; i < message.Value.length; ++i) if (!$util.isString(message.Value[i])) return \"Value: string[] expected\";\n          }\n          return null;\n        };\n\n        /**\n         * Creates a PbStringArray message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbStringArray} PbStringArray\n         */\n        PbStringArray.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbStringArray) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbStringArray();\n          if (object.Value) {\n            if (!Array.isArray(object.Value)) throw TypeError(\".GoPlay.Core.Protocols.PbStringArray.Value: array expected\");\n            message.Value = [];\n            for (var i = 0; i < object.Value.length; ++i) message.Value[i] = String(object.Value[i]);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbStringArray message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {GoPlay.Core.Protocols.PbStringArray} message PbStringArray\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbStringArray.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.arrays || options.defaults) object.Value = [];\n          if (message.Value && message.Value.length) {\n            object.Value = [];\n            for (var j = 0; j < message.Value.length; ++j) object.Value[j] = message.Value[j];\n          }\n          return object;\n        };\n\n        /**\n         * Converts this PbStringArray to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbStringArray.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbStringArray\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbStringArray\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbStringArray.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbStringArray\";\n        };\n        return PbStringArray;\n      }();\n      Protocols.PbIntArray = function () {\n        /**\n         * Properties of a PbIntArray.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbIntArray\n         * @property {Array.<number>|null} [Value] PbIntArray Value\n         */\n\n        /**\n         * Constructs a new PbIntArray.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbIntArray.\n         * @implements IPbIntArray\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbIntArray=} [properties] Properties to set\n         */\n        function PbIntArray(properties) {\n          this.Value = [];\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbIntArray Value.\n         * @member {Array.<number>} Value\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @instance\n         */\n        PbIntArray.prototype.Value = $util.emptyArray;\n\n        /**\n         * Creates a new PbIntArray instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbIntArray=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbIntArray} PbIntArray instance\n         */\n        PbIntArray.create = function create(properties) {\n          return new PbIntArray(properties);\n        };\n\n        /**\n         * Encodes the specified PbIntArray message. Does not implicitly {@link GoPlay.Core.Protocols.PbIntArray.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbIntArray} message PbIntArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbIntArray.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && message.Value.length) {\n            writer.uint32( /* id 1, wireType 2 =*/10).fork();\n            for (var i = 0; i < message.Value.length; ++i) writer.int32(message.Value[i]);\n            writer.ldelim();\n          }\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbIntArray message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbIntArray.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbIntArray} message PbIntArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbIntArray.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbIntArray message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbIntArray} PbIntArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbIntArray.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbIntArray();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  if (!(message.Value && message.Value.length)) message.Value = [];\n                  if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2) message.Value.push(reader.int32());\n                  } else message.Value.push(reader.int32());\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbIntArray message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbIntArray} PbIntArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbIntArray.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbIntArray message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbIntArray.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) {\n            if (!Array.isArray(message.Value)) return \"Value: array expected\";\n            for (var i = 0; i < message.Value.length; ++i) if (!$util.isInteger(message.Value[i])) return \"Value: integer[] expected\";\n          }\n          return null;\n        };\n\n        /**\n         * Creates a PbIntArray message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbIntArray} PbIntArray\n         */\n        PbIntArray.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbIntArray) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbIntArray();\n          if (object.Value) {\n            if (!Array.isArray(object.Value)) throw TypeError(\".GoPlay.Core.Protocols.PbIntArray.Value: array expected\");\n            message.Value = [];\n            for (var i = 0; i < object.Value.length; ++i) message.Value[i] = object.Value[i] | 0;\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbIntArray message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {GoPlay.Core.Protocols.PbIntArray} message PbIntArray\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbIntArray.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.arrays || options.defaults) object.Value = [];\n          if (message.Value && message.Value.length) {\n            object.Value = [];\n            for (var j = 0; j < message.Value.length; ++j) object.Value[j] = message.Value[j];\n          }\n          return object;\n        };\n\n        /**\n         * Converts this PbIntArray to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbIntArray.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbIntArray\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbIntArray\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbIntArray.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbIntArray\";\n        };\n        return PbIntArray;\n      }();\n      Protocols.PbFloatArray = function () {\n        /**\n         * Properties of a PbFloatArray.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbFloatArray\n         * @property {Array.<number>|null} [Value] PbFloatArray Value\n         */\n\n        /**\n         * Constructs a new PbFloatArray.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbFloatArray.\n         * @implements IPbFloatArray\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbFloatArray=} [properties] Properties to set\n         */\n        function PbFloatArray(properties) {\n          this.Value = [];\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbFloatArray Value.\n         * @member {Array.<number>} Value\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @instance\n         */\n        PbFloatArray.prototype.Value = $util.emptyArray;\n\n        /**\n         * Creates a new PbFloatArray instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbFloatArray=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbFloatArray} PbFloatArray instance\n         */\n        PbFloatArray.create = function create(properties) {\n          return new PbFloatArray(properties);\n        };\n\n        /**\n         * Encodes the specified PbFloatArray message. Does not implicitly {@link GoPlay.Core.Protocols.PbFloatArray.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbFloatArray} message PbFloatArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbFloatArray.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && message.Value.length) {\n            writer.uint32( /* id 1, wireType 2 =*/10).fork();\n            for (var i = 0; i < message.Value.length; ++i) writer[\"float\"](message.Value[i]);\n            writer.ldelim();\n          }\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbFloatArray message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbFloatArray.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbFloatArray} message PbFloatArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbFloatArray.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbFloatArray message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbFloatArray} PbFloatArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbFloatArray.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbFloatArray();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  if (!(message.Value && message.Value.length)) message.Value = [];\n                  if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2) message.Value.push(reader[\"float\"]());\n                  } else message.Value.push(reader[\"float\"]());\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbFloatArray message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbFloatArray} PbFloatArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbFloatArray.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbFloatArray message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbFloatArray.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) {\n            if (!Array.isArray(message.Value)) return \"Value: array expected\";\n            for (var i = 0; i < message.Value.length; ++i) if (typeof message.Value[i] !== \"number\") return \"Value: number[] expected\";\n          }\n          return null;\n        };\n\n        /**\n         * Creates a PbFloatArray message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbFloatArray} PbFloatArray\n         */\n        PbFloatArray.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbFloatArray) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbFloatArray();\n          if (object.Value) {\n            if (!Array.isArray(object.Value)) throw TypeError(\".GoPlay.Core.Protocols.PbFloatArray.Value: array expected\");\n            message.Value = [];\n            for (var i = 0; i < object.Value.length; ++i) message.Value[i] = Number(object.Value[i]);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbFloatArray message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {GoPlay.Core.Protocols.PbFloatArray} message PbFloatArray\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbFloatArray.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.arrays || options.defaults) object.Value = [];\n          if (message.Value && message.Value.length) {\n            object.Value = [];\n            for (var j = 0; j < message.Value.length; ++j) object.Value[j] = options.json && !isFinite(message.Value[j]) ? String(message.Value[j]) : message.Value[j];\n          }\n          return object;\n        };\n\n        /**\n         * Converts this PbFloatArray to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbFloatArray.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbFloatArray\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbFloatArray\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbFloatArray.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbFloatArray\";\n        };\n        return PbFloatArray;\n      }();\n      Protocols.PbBoolArray = function () {\n        /**\n         * Properties of a PbBoolArray.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPbBoolArray\n         * @property {Array.<boolean>|null} [Value] PbBoolArray Value\n         */\n\n        /**\n         * Constructs a new PbBoolArray.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PbBoolArray.\n         * @implements IPbBoolArray\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPbBoolArray=} [properties] Properties to set\n         */\n        function PbBoolArray(properties) {\n          this.Value = [];\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PbBoolArray Value.\n         * @member {Array.<boolean>} Value\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @instance\n         */\n        PbBoolArray.prototype.Value = $util.emptyArray;\n\n        /**\n         * Creates a new PbBoolArray instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbBoolArray=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PbBoolArray} PbBoolArray instance\n         */\n        PbBoolArray.create = function create(properties) {\n          return new PbBoolArray(properties);\n        };\n\n        /**\n         * Encodes the specified PbBoolArray message. Does not implicitly {@link GoPlay.Core.Protocols.PbBoolArray.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbBoolArray} message PbBoolArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbBoolArray.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Value != null && message.Value.length) {\n            writer.uint32( /* id 1, wireType 2 =*/10).fork();\n            for (var i = 0; i < message.Value.length; ++i) writer.bool(message.Value[i]);\n            writer.ldelim();\n          }\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PbBoolArray message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PbBoolArray.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {GoPlay.Core.Protocols.IPbBoolArray} message PbBoolArray message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PbBoolArray.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PbBoolArray message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PbBoolArray} PbBoolArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbBoolArray.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PbBoolArray();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  if (!(message.Value && message.Value.length)) message.Value = [];\n                  if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2) message.Value.push(reader.bool());\n                  } else message.Value.push(reader.bool());\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PbBoolArray message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PbBoolArray} PbBoolArray\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PbBoolArray.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PbBoolArray message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PbBoolArray.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Value != null && message.hasOwnProperty(\"Value\")) {\n            if (!Array.isArray(message.Value)) return \"Value: array expected\";\n            for (var i = 0; i < message.Value.length; ++i) if (typeof message.Value[i] !== \"boolean\") return \"Value: boolean[] expected\";\n          }\n          return null;\n        };\n\n        /**\n         * Creates a PbBoolArray message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PbBoolArray} PbBoolArray\n         */\n        PbBoolArray.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PbBoolArray) return object;\n          var message = new $root.GoPlay.Core.Protocols.PbBoolArray();\n          if (object.Value) {\n            if (!Array.isArray(object.Value)) throw TypeError(\".GoPlay.Core.Protocols.PbBoolArray.Value: array expected\");\n            message.Value = [];\n            for (var i = 0; i < object.Value.length; ++i) message.Value[i] = Boolean(object.Value[i]);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PbBoolArray message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {GoPlay.Core.Protocols.PbBoolArray} message PbBoolArray\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PbBoolArray.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.arrays || options.defaults) object.Value = [];\n          if (message.Value && message.Value.length) {\n            object.Value = [];\n            for (var j = 0; j < message.Value.length; ++j) object.Value[j] = message.Value[j];\n          }\n          return object;\n        };\n\n        /**\n         * Converts this PbBoolArray to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PbBoolArray.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PbBoolArray\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PbBoolArray\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PbBoolArray.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PbBoolArray\";\n        };\n        return PbBoolArray;\n      }();\n\n      /**\n       * StatusCode enum.\n       * @name GoPlay.Core.Protocols.StatusCode\n       * @enum {number}\n       * @property {number} Success=0 Success value\n       * @property {number} Failed=1 Failed value\n       * @property {number} Error=2 Error value\n       * @property {number} Timeout=3 Timeout value\n       */\n      Protocols.StatusCode = function () {\n        var valuesById = {},\n          values = Object.create(valuesById);\n        values[valuesById[0] = \"Success\"] = 0;\n        values[valuesById[1] = \"Failed\"] = 1;\n        values[valuesById[2] = \"Error\"] = 2;\n        values[valuesById[3] = \"Timeout\"] = 3;\n        return values;\n      }();\n\n      /**\n       * PackageType enum.\n       * @name GoPlay.Core.Protocols.PackageType\n       * @enum {number}\n       * @property {number} HankShakeReq=0 HankShakeReq value\n       * @property {number} HankShakeResp=1 HankShakeResp value\n       * @property {number} Ping=2 Ping value\n       * @property {number} Pong=3 Pong value\n       * @property {number} Notify=4 Notify value\n       * @property {number} Request=5 Request value\n       * @property {number} Response=6 Response value\n       * @property {number} Push=7 Push value\n       * @property {number} Kick=8 Kick value\n       */\n      Protocols.PackageType = function () {\n        var valuesById = {},\n          values = Object.create(valuesById);\n        values[valuesById[0] = \"HankShakeReq\"] = 0;\n        values[valuesById[1] = \"HankShakeResp\"] = 1;\n        values[valuesById[2] = \"Ping\"] = 2;\n        values[valuesById[3] = \"Pong\"] = 3;\n        values[valuesById[4] = \"Notify\"] = 4;\n        values[valuesById[5] = \"Request\"] = 5;\n        values[valuesById[6] = \"Response\"] = 6;\n        values[valuesById[7] = \"Push\"] = 7;\n        values[valuesById[8] = \"Kick\"] = 8;\n        return values;\n      }();\n\n      /**\n       * EncodingType enum.\n       * @name GoPlay.Core.Protocols.EncodingType\n       * @enum {number}\n       * @property {number} Protobuf=0 Protobuf value\n       * @property {number} Json=1 Json value\n       */\n      Protocols.EncodingType = function () {\n        var valuesById = {},\n          values = Object.create(valuesById);\n        values[valuesById[0] = \"Protobuf\"] = 0;\n        values[valuesById[1] = \"Json\"] = 1;\n        return values;\n      }();\n\n      /**\n       * ServerTag enum.\n       * @name GoPlay.Core.Protocols.ServerTag\n       * @enum {number}\n       * @property {number} Empty=0 Empty value\n       * @property {number} FrontEnd=1 FrontEnd value\n       * @property {number} BackEnd=2 BackEnd value\n       * @property {number} All=3 All value\n       */\n      Protocols.ServerTag = function () {\n        var valuesById = {},\n          values = Object.create(valuesById);\n        values[valuesById[0] = \"Empty\"] = 0;\n        values[valuesById[1] = \"FrontEnd\"] = 1;\n        values[valuesById[2] = \"BackEnd\"] = 2;\n        values[valuesById[3] = \"All\"] = 3;\n        return values;\n      }();\n      Protocols.Status = function () {\n        /**\n         * Properties of a Status.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IStatus\n         * @property {GoPlay.Core.Protocols.StatusCode|null} [Code] Status Code\n         * @property {string|null} [Message] Status Message\n         */\n\n        /**\n         * Constructs a new Status.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a Status.\n         * @implements IStatus\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IStatus=} [properties] Properties to set\n         */\n        function Status(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Status Code.\n         * @member {GoPlay.Core.Protocols.StatusCode} Code\n         * @memberof GoPlay.Core.Protocols.Status\n         * @instance\n         */\n        Status.prototype.Code = 0;\n\n        /**\n         * Status Message.\n         * @member {string} Message\n         * @memberof GoPlay.Core.Protocols.Status\n         * @instance\n         */\n        Status.prototype.Message = \"\";\n\n        /**\n         * Creates a new Status instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {GoPlay.Core.Protocols.IStatus=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.Status} Status instance\n         */\n        Status.create = function create(properties) {\n          return new Status(properties);\n        };\n\n        /**\n         * Encodes the specified Status message. Does not implicitly {@link GoPlay.Core.Protocols.Status.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {GoPlay.Core.Protocols.IStatus} message Status message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Status.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Code != null && Object.hasOwnProperty.call(message, \"Code\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.Code);\n          if (message.Message != null && Object.hasOwnProperty.call(message, \"Message\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.Message);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified Status message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.Status.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {GoPlay.Core.Protocols.IStatus} message Status message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Status.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Status message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.Status} Status\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Status.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.Status();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Code = reader.int32();\n                  break;\n                }\n              case 2:\n                {\n                  message.Message = reader.string();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a Status message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.Status} Status\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Status.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Status message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Status.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Code != null && message.hasOwnProperty(\"Code\")) switch (message.Code) {\n            default:\n              return \"Code: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n              break;\n          }\n          if (message.Message != null && message.hasOwnProperty(\"Message\")) if (!$util.isString(message.Message)) return \"Message: string expected\";\n          return null;\n        };\n\n        /**\n         * Creates a Status message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.Status} Status\n         */\n        Status.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.Status) return object;\n          var message = new $root.GoPlay.Core.Protocols.Status();\n          switch (object.Code) {\n            default:\n              if (typeof object.Code === \"number\") {\n                message.Code = object.Code;\n                break;\n              }\n              break;\n            case \"Success\":\n            case 0:\n              message.Code = 0;\n              break;\n            case \"Failed\":\n            case 1:\n              message.Code = 1;\n              break;\n            case \"Error\":\n            case 2:\n              message.Code = 2;\n              break;\n            case \"Timeout\":\n            case 3:\n              message.Code = 3;\n              break;\n          }\n          if (object.Message != null) message.Message = String(object.Message);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a Status message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {GoPlay.Core.Protocols.Status} message Status\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Status.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.Code = options.enums === String ? \"Success\" : 0;\n            object.Message = \"\";\n          }\n          if (message.Code != null && message.hasOwnProperty(\"Code\")) object.Code = options.enums === String ? $root.GoPlay.Core.Protocols.StatusCode[message.Code] === undefined ? message.Code : $root.GoPlay.Core.Protocols.StatusCode[message.Code] : message.Code;\n          if (message.Message != null && message.hasOwnProperty(\"Message\")) object.Message = message.Message;\n          return object;\n        };\n\n        /**\n         * Converts this Status to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.Status\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Status.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Status\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.Status\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.Status\";\n        };\n        return Status;\n      }();\n      Protocols.Session = function () {\n        /**\n         * Properties of a Session.\n         * @memberof GoPlay.Core.Protocols\n         * @interface ISession\n         * @property {string|null} [Guid] Session Guid\n         * @property {Object.<string,google.protobuf.IAny>|null} [Values] Session Values\n         */\n\n        /**\n         * Constructs a new Session.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a Session.\n         * @implements ISession\n         * @constructor\n         * @param {GoPlay.Core.Protocols.ISession=} [properties] Properties to set\n         */\n        function Session(properties) {\n          this.Values = {};\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Session Guid.\n         * @member {string} Guid\n         * @memberof GoPlay.Core.Protocols.Session\n         * @instance\n         */\n        Session.prototype.Guid = \"\";\n\n        /**\n         * Session Values.\n         * @member {Object.<string,google.protobuf.IAny>} Values\n         * @memberof GoPlay.Core.Protocols.Session\n         * @instance\n         */\n        Session.prototype.Values = $util.emptyObject;\n\n        /**\n         * Creates a new Session instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {GoPlay.Core.Protocols.ISession=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.Session} Session instance\n         */\n        Session.create = function create(properties) {\n          return new Session(properties);\n        };\n\n        /**\n         * Encodes the specified Session message. Does not implicitly {@link GoPlay.Core.Protocols.Session.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {GoPlay.Core.Protocols.ISession} message Session message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Session.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Guid != null && Object.hasOwnProperty.call(message, \"Guid\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.Guid);\n          if (message.Values != null && Object.hasOwnProperty.call(message, \"Values\")) for (var keys = Object.keys(message.Values), i = 0; i < keys.length; ++i) {\n            writer.uint32( /* id 2, wireType 2 =*/18).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n            $root.google.protobuf.Any.encode(message.Values[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n          }\n          return writer;\n        };\n\n        /**\n         * Encodes the specified Session message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.Session.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {GoPlay.Core.Protocols.ISession} message Session message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Session.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Session message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.Session} Session\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Session.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.Session(),\n            key,\n            value;\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Guid = reader.string();\n                  break;\n                }\n              case 2:\n                {\n                  if (message.Values === $util.emptyObject) message.Values = {};\n                  var end2 = reader.uint32() + reader.pos;\n                  key = \"\";\n                  value = null;\n                  while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                      case 1:\n                        key = reader.string();\n                        break;\n                      case 2:\n                        value = $root.google.protobuf.Any.decode(reader, reader.uint32());\n                        break;\n                      default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                  }\n                  message.Values[key] = value;\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a Session message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.Session} Session\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Session.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Session message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Session.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Guid != null && message.hasOwnProperty(\"Guid\")) if (!$util.isString(message.Guid)) return \"Guid: string expected\";\n          if (message.Values != null && message.hasOwnProperty(\"Values\")) {\n            if (!$util.isObject(message.Values)) return \"Values: object expected\";\n            var key = Object.keys(message.Values);\n            for (var i = 0; i < key.length; ++i) {\n              var error = $root.google.protobuf.Any.verify(message.Values[key[i]]);\n              if (error) return \"Values.\" + error;\n            }\n          }\n          return null;\n        };\n\n        /**\n         * Creates a Session message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.Session} Session\n         */\n        Session.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.Session) return object;\n          var message = new $root.GoPlay.Core.Protocols.Session();\n          if (object.Guid != null) message.Guid = String(object.Guid);\n          if (object.Values) {\n            if (_typeof(object.Values) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.Session.Values: object expected\");\n            message.Values = {};\n            for (var keys = Object.keys(object.Values), i = 0; i < keys.length; ++i) {\n              if (_typeof(object.Values[keys[i]]) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.Session.Values: object expected\");\n              message.Values[keys[i]] = $root.google.protobuf.Any.fromObject(object.Values[keys[i]]);\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a Session message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {GoPlay.Core.Protocols.Session} message Session\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Session.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.objects || options.defaults) object.Values = {};\n          if (options.defaults) object.Guid = \"\";\n          if (message.Guid != null && message.hasOwnProperty(\"Guid\")) object.Guid = message.Guid;\n          var keys2;\n          if (message.Values && (keys2 = Object.keys(message.Values)).length) {\n            object.Values = {};\n            for (var j = 0; j < keys2.length; ++j) object.Values[keys2[j]] = $root.google.protobuf.Any.toObject(message.Values[keys2[j]], options);\n          }\n          return object;\n        };\n\n        /**\n         * Converts this Session to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.Session\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Session.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Session\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.Session\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Session.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.Session\";\n        };\n        return Session;\n      }();\n      Protocols.PackageInfo = function () {\n        /**\n         * Properties of a PackageInfo.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IPackageInfo\n         * @property {GoPlay.Core.Protocols.PackageType|null} [Type] PackageInfo Type\n         * @property {number|null} [Id] PackageInfo Id\n         * @property {GoPlay.Core.Protocols.EncodingType|null} [EncodingType] PackageInfo EncodingType\n         * @property {number|null} [Route] PackageInfo Route\n         * @property {number|null} [ContentSize] PackageInfo ContentSize\n         */\n\n        /**\n         * Constructs a new PackageInfo.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a PackageInfo.\n         * @implements IPackageInfo\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IPackageInfo=} [properties] Properties to set\n         */\n        function PackageInfo(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PackageInfo Type.\n         * @member {GoPlay.Core.Protocols.PackageType} Type\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @instance\n         */\n        PackageInfo.prototype.Type = 0;\n\n        /**\n         * PackageInfo Id.\n         * @member {number} Id\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @instance\n         */\n        PackageInfo.prototype.Id = 0;\n\n        /**\n         * PackageInfo EncodingType.\n         * @member {GoPlay.Core.Protocols.EncodingType} EncodingType\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @instance\n         */\n        PackageInfo.prototype.EncodingType = 0;\n\n        /**\n         * PackageInfo Route.\n         * @member {number} Route\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @instance\n         */\n        PackageInfo.prototype.Route = 0;\n\n        /**\n         * PackageInfo ContentSize.\n         * @member {number} ContentSize\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @instance\n         */\n        PackageInfo.prototype.ContentSize = 0;\n\n        /**\n         * Creates a new PackageInfo instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {GoPlay.Core.Protocols.IPackageInfo=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.PackageInfo} PackageInfo instance\n         */\n        PackageInfo.create = function create(properties) {\n          return new PackageInfo(properties);\n        };\n\n        /**\n         * Encodes the specified PackageInfo message. Does not implicitly {@link GoPlay.Core.Protocols.PackageInfo.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {GoPlay.Core.Protocols.IPackageInfo} message PackageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PackageInfo.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Type != null && Object.hasOwnProperty.call(message, \"Type\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.Type);\n          if (message.Id != null && Object.hasOwnProperty.call(message, \"Id\")) writer.uint32( /* id 2, wireType 0 =*/16).uint32(message.Id);\n          if (message.EncodingType != null && Object.hasOwnProperty.call(message, \"EncodingType\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.EncodingType);\n          if (message.Route != null && Object.hasOwnProperty.call(message, \"Route\")) writer.uint32( /* id 4, wireType 0 =*/32).uint32(message.Route);\n          if (message.ContentSize != null && Object.hasOwnProperty.call(message, \"ContentSize\")) writer.uint32( /* id 5, wireType 0 =*/40).uint32(message.ContentSize);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified PackageInfo message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.PackageInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {GoPlay.Core.Protocols.IPackageInfo} message PackageInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PackageInfo.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PackageInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.PackageInfo} PackageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PackageInfo.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.PackageInfo();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Type = reader.int32();\n                  break;\n                }\n              case 2:\n                {\n                  message.Id = reader.uint32();\n                  break;\n                }\n              case 3:\n                {\n                  message.EncodingType = reader.int32();\n                  break;\n                }\n              case 4:\n                {\n                  message.Route = reader.uint32();\n                  break;\n                }\n              case 5:\n                {\n                  message.ContentSize = reader.uint32();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a PackageInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.PackageInfo} PackageInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PackageInfo.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PackageInfo message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PackageInfo.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Type != null && message.hasOwnProperty(\"Type\")) switch (message.Type) {\n            default:\n              return \"Type: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n              break;\n          }\n          if (message.Id != null && message.hasOwnProperty(\"Id\")) if (!$util.isInteger(message.Id)) return \"Id: integer expected\";\n          if (message.EncodingType != null && message.hasOwnProperty(\"EncodingType\")) switch (message.EncodingType) {\n            default:\n              return \"EncodingType: enum value expected\";\n            case 0:\n            case 1:\n              break;\n          }\n          if (message.Route != null && message.hasOwnProperty(\"Route\")) if (!$util.isInteger(message.Route)) return \"Route: integer expected\";\n          if (message.ContentSize != null && message.hasOwnProperty(\"ContentSize\")) if (!$util.isInteger(message.ContentSize)) return \"ContentSize: integer expected\";\n          return null;\n        };\n\n        /**\n         * Creates a PackageInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.PackageInfo} PackageInfo\n         */\n        PackageInfo.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.PackageInfo) return object;\n          var message = new $root.GoPlay.Core.Protocols.PackageInfo();\n          switch (object.Type) {\n            default:\n              if (typeof object.Type === \"number\") {\n                message.Type = object.Type;\n                break;\n              }\n              break;\n            case \"HankShakeReq\":\n            case 0:\n              message.Type = 0;\n              break;\n            case \"HankShakeResp\":\n            case 1:\n              message.Type = 1;\n              break;\n            case \"Ping\":\n            case 2:\n              message.Type = 2;\n              break;\n            case \"Pong\":\n            case 3:\n              message.Type = 3;\n              break;\n            case \"Notify\":\n            case 4:\n              message.Type = 4;\n              break;\n            case \"Request\":\n            case 5:\n              message.Type = 5;\n              break;\n            case \"Response\":\n            case 6:\n              message.Type = 6;\n              break;\n            case \"Push\":\n            case 7:\n              message.Type = 7;\n              break;\n            case \"Kick\":\n            case 8:\n              message.Type = 8;\n              break;\n          }\n          if (object.Id != null) message.Id = object.Id >>> 0;\n          switch (object.EncodingType) {\n            default:\n              if (typeof object.EncodingType === \"number\") {\n                message.EncodingType = object.EncodingType;\n                break;\n              }\n              break;\n            case \"Protobuf\":\n            case 0:\n              message.EncodingType = 0;\n              break;\n            case \"Json\":\n            case 1:\n              message.EncodingType = 1;\n              break;\n          }\n          if (object.Route != null) message.Route = object.Route >>> 0;\n          if (object.ContentSize != null) message.ContentSize = object.ContentSize >>> 0;\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a PackageInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {GoPlay.Core.Protocols.PackageInfo} message PackageInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PackageInfo.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.Type = options.enums === String ? \"HankShakeReq\" : 0;\n            object.Id = 0;\n            object.EncodingType = options.enums === String ? \"Protobuf\" : 0;\n            object.Route = 0;\n            object.ContentSize = 0;\n          }\n          if (message.Type != null && message.hasOwnProperty(\"Type\")) object.Type = options.enums === String ? $root.GoPlay.Core.Protocols.PackageType[message.Type] === undefined ? message.Type : $root.GoPlay.Core.Protocols.PackageType[message.Type] : message.Type;\n          if (message.Id != null && message.hasOwnProperty(\"Id\")) object.Id = message.Id;\n          if (message.EncodingType != null && message.hasOwnProperty(\"EncodingType\")) object.EncodingType = options.enums === String ? $root.GoPlay.Core.Protocols.EncodingType[message.EncodingType] === undefined ? message.EncodingType : $root.GoPlay.Core.Protocols.EncodingType[message.EncodingType] : message.EncodingType;\n          if (message.Route != null && message.hasOwnProperty(\"Route\")) object.Route = message.Route;\n          if (message.ContentSize != null && message.hasOwnProperty(\"ContentSize\")) object.ContentSize = message.ContentSize;\n          return object;\n        };\n\n        /**\n         * Converts this PackageInfo to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PackageInfo.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PackageInfo\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.PackageInfo\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PackageInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.PackageInfo\";\n        };\n        return PackageInfo;\n      }();\n      Protocols.Header = function () {\n        /**\n         * Properties of a Header.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IHeader\n         * @property {GoPlay.Core.Protocols.IStatus|null} [Status] Header Status\n         * @property {GoPlay.Core.Protocols.ISession|null} [Session] Header Session\n         * @property {GoPlay.Core.Protocols.IPackageInfo|null} [PackageInfo] Header PackageInfo\n         */\n\n        /**\n         * Constructs a new Header.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a Header.\n         * @implements IHeader\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IHeader=} [properties] Properties to set\n         */\n        function Header(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Header Status.\n         * @member {GoPlay.Core.Protocols.IStatus|null|undefined} Status\n         * @memberof GoPlay.Core.Protocols.Header\n         * @instance\n         */\n        Header.prototype.Status = null;\n\n        /**\n         * Header Session.\n         * @member {GoPlay.Core.Protocols.ISession|null|undefined} Session\n         * @memberof GoPlay.Core.Protocols.Header\n         * @instance\n         */\n        Header.prototype.Session = null;\n\n        /**\n         * Header PackageInfo.\n         * @member {GoPlay.Core.Protocols.IPackageInfo|null|undefined} PackageInfo\n         * @memberof GoPlay.Core.Protocols.Header\n         * @instance\n         */\n        Header.prototype.PackageInfo = null;\n\n        /**\n         * Creates a new Header instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {GoPlay.Core.Protocols.IHeader=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.Header} Header instance\n         */\n        Header.create = function create(properties) {\n          return new Header(properties);\n        };\n\n        /**\n         * Encodes the specified Header message. Does not implicitly {@link GoPlay.Core.Protocols.Header.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {GoPlay.Core.Protocols.IHeader} message Header message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Header.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.Status != null && Object.hasOwnProperty.call(message, \"Status\")) $root.GoPlay.Core.Protocols.Status.encode(message.Status, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n          if (message.Session != null && Object.hasOwnProperty.call(message, \"Session\")) $root.GoPlay.Core.Protocols.Session.encode(message.Session, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n          if (message.PackageInfo != null && Object.hasOwnProperty.call(message, \"PackageInfo\")) $root.GoPlay.Core.Protocols.PackageInfo.encode(message.PackageInfo, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified Header message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.Header.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {GoPlay.Core.Protocols.IHeader} message Header message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Header.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Header message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.Header} Header\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Header.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.Header();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.Status = $root.GoPlay.Core.Protocols.Status.decode(reader, reader.uint32());\n                  break;\n                }\n              case 2:\n                {\n                  message.Session = $root.GoPlay.Core.Protocols.Session.decode(reader, reader.uint32());\n                  break;\n                }\n              case 3:\n                {\n                  message.PackageInfo = $root.GoPlay.Core.Protocols.PackageInfo.decode(reader, reader.uint32());\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a Header message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.Header} Header\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Header.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Header message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Header.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.Status != null && message.hasOwnProperty(\"Status\")) {\n            var error = $root.GoPlay.Core.Protocols.Status.verify(message.Status);\n            if (error) return \"Status.\" + error;\n          }\n          if (message.Session != null && message.hasOwnProperty(\"Session\")) {\n            var error = $root.GoPlay.Core.Protocols.Session.verify(message.Session);\n            if (error) return \"Session.\" + error;\n          }\n          if (message.PackageInfo != null && message.hasOwnProperty(\"PackageInfo\")) {\n            var error = $root.GoPlay.Core.Protocols.PackageInfo.verify(message.PackageInfo);\n            if (error) return \"PackageInfo.\" + error;\n          }\n          return null;\n        };\n\n        /**\n         * Creates a Header message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.Header} Header\n         */\n        Header.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.Header) return object;\n          var message = new $root.GoPlay.Core.Protocols.Header();\n          if (object.Status != null) {\n            if (_typeof(object.Status) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.Header.Status: object expected\");\n            message.Status = $root.GoPlay.Core.Protocols.Status.fromObject(object.Status);\n          }\n          if (object.Session != null) {\n            if (_typeof(object.Session) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.Header.Session: object expected\");\n            message.Session = $root.GoPlay.Core.Protocols.Session.fromObject(object.Session);\n          }\n          if (object.PackageInfo != null) {\n            if (_typeof(object.PackageInfo) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.Header.PackageInfo: object expected\");\n            message.PackageInfo = $root.GoPlay.Core.Protocols.PackageInfo.fromObject(object.PackageInfo);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a Header message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {GoPlay.Core.Protocols.Header} message Header\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Header.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.Status = null;\n            object.Session = null;\n            object.PackageInfo = null;\n          }\n          if (message.Status != null && message.hasOwnProperty(\"Status\")) object.Status = $root.GoPlay.Core.Protocols.Status.toObject(message.Status, options);\n          if (message.Session != null && message.hasOwnProperty(\"Session\")) object.Session = $root.GoPlay.Core.Protocols.Session.toObject(message.Session, options);\n          if (message.PackageInfo != null && message.hasOwnProperty(\"PackageInfo\")) object.PackageInfo = $root.GoPlay.Core.Protocols.PackageInfo.toObject(message.PackageInfo, options);\n          return object;\n        };\n\n        /**\n         * Converts this Header to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.Header\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Header.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Header\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.Header\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Header.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.Header\";\n        };\n        return Header;\n      }();\n      Protocols.ReqHankShake = function () {\n        /**\n         * Properties of a ReqHankShake.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IReqHankShake\n         * @property {string|null} [ClientVersion] ReqHankShake ClientVersion\n         * @property {GoPlay.Core.Protocols.ServerTag|null} [ServerTag] ReqHankShake ServerTag\n         * @property {string|null} [AppKey] ReqHankShake AppKey\n         */\n\n        /**\n         * Constructs a new ReqHankShake.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a ReqHankShake.\n         * @implements IReqHankShake\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IReqHankShake=} [properties] Properties to set\n         */\n        function ReqHankShake(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ReqHankShake ClientVersion.\n         * @member {string} ClientVersion\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @instance\n         */\n        ReqHankShake.prototype.ClientVersion = \"\";\n\n        /**\n         * ReqHankShake ServerTag.\n         * @member {GoPlay.Core.Protocols.ServerTag} ServerTag\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @instance\n         */\n        ReqHankShake.prototype.ServerTag = 0;\n\n        /**\n         * ReqHankShake AppKey.\n         * @member {string} AppKey\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @instance\n         */\n        ReqHankShake.prototype.AppKey = \"\";\n\n        /**\n         * Creates a new ReqHankShake instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {GoPlay.Core.Protocols.IReqHankShake=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.ReqHankShake} ReqHankShake instance\n         */\n        ReqHankShake.create = function create(properties) {\n          return new ReqHankShake(properties);\n        };\n\n        /**\n         * Encodes the specified ReqHankShake message. Does not implicitly {@link GoPlay.Core.Protocols.ReqHankShake.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {GoPlay.Core.Protocols.IReqHankShake} message ReqHankShake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReqHankShake.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.ClientVersion != null && Object.hasOwnProperty.call(message, \"ClientVersion\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.ClientVersion);\n          if (message.ServerTag != null && Object.hasOwnProperty.call(message, \"ServerTag\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.ServerTag);\n          if (message.AppKey != null && Object.hasOwnProperty.call(message, \"AppKey\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.AppKey);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified ReqHankShake message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.ReqHankShake.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {GoPlay.Core.Protocols.IReqHankShake} message ReqHankShake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReqHankShake.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ReqHankShake message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.ReqHankShake} ReqHankShake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReqHankShake.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.ReqHankShake();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.ClientVersion = reader.string();\n                  break;\n                }\n              case 2:\n                {\n                  message.ServerTag = reader.int32();\n                  break;\n                }\n              case 3:\n                {\n                  message.AppKey = reader.string();\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a ReqHankShake message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.ReqHankShake} ReqHankShake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReqHankShake.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ReqHankShake message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ReqHankShake.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.ClientVersion != null && message.hasOwnProperty(\"ClientVersion\")) if (!$util.isString(message.ClientVersion)) return \"ClientVersion: string expected\";\n          if (message.ServerTag != null && message.hasOwnProperty(\"ServerTag\")) switch (message.ServerTag) {\n            default:\n              return \"ServerTag: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n              break;\n          }\n          if (message.AppKey != null && message.hasOwnProperty(\"AppKey\")) if (!$util.isString(message.AppKey)) return \"AppKey: string expected\";\n          return null;\n        };\n\n        /**\n         * Creates a ReqHankShake message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.ReqHankShake} ReqHankShake\n         */\n        ReqHankShake.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.ReqHankShake) return object;\n          var message = new $root.GoPlay.Core.Protocols.ReqHankShake();\n          if (object.ClientVersion != null) message.ClientVersion = String(object.ClientVersion);\n          switch (object.ServerTag) {\n            default:\n              if (typeof object.ServerTag === \"number\") {\n                message.ServerTag = object.ServerTag;\n                break;\n              }\n              break;\n            case \"Empty\":\n            case 0:\n              message.ServerTag = 0;\n              break;\n            case \"FrontEnd\":\n            case 1:\n              message.ServerTag = 1;\n              break;\n            case \"BackEnd\":\n            case 2:\n              message.ServerTag = 2;\n              break;\n            case \"All\":\n            case 3:\n              message.ServerTag = 3;\n              break;\n          }\n          if (object.AppKey != null) message.AppKey = String(object.AppKey);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a ReqHankShake message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {GoPlay.Core.Protocols.ReqHankShake} message ReqHankShake\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ReqHankShake.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.ClientVersion = \"\";\n            object.ServerTag = options.enums === String ? \"Empty\" : 0;\n            object.AppKey = \"\";\n          }\n          if (message.ClientVersion != null && message.hasOwnProperty(\"ClientVersion\")) object.ClientVersion = message.ClientVersion;\n          if (message.ServerTag != null && message.hasOwnProperty(\"ServerTag\")) object.ServerTag = options.enums === String ? $root.GoPlay.Core.Protocols.ServerTag[message.ServerTag] === undefined ? message.ServerTag : $root.GoPlay.Core.Protocols.ServerTag[message.ServerTag] : message.ServerTag;\n          if (message.AppKey != null && message.hasOwnProperty(\"AppKey\")) object.AppKey = message.AppKey;\n          return object;\n        };\n\n        /**\n         * Converts this ReqHankShake to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ReqHankShake.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ReqHankShake\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.ReqHankShake\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ReqHankShake.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.ReqHankShake\";\n        };\n        return ReqHankShake;\n      }();\n      Protocols.RespHandShake = function () {\n        /**\n         * Properties of a RespHandShake.\n         * @memberof GoPlay.Core.Protocols\n         * @interface IRespHandShake\n         * @property {string|null} [ServerVersion] RespHandShake ServerVersion\n         * @property {number|null} [HeartBeatInterval] RespHandShake HeartBeatInterval\n         * @property {Object.<string,number>|null} [Routes] RespHandShake Routes\n         */\n\n        /**\n         * Constructs a new RespHandShake.\n         * @memberof GoPlay.Core.Protocols\n         * @classdesc Represents a RespHandShake.\n         * @implements IRespHandShake\n         * @constructor\n         * @param {GoPlay.Core.Protocols.IRespHandShake=} [properties] Properties to set\n         */\n        function RespHandShake(properties) {\n          this.Routes = {};\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RespHandShake ServerVersion.\n         * @member {string} ServerVersion\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @instance\n         */\n        RespHandShake.prototype.ServerVersion = \"\";\n\n        /**\n         * RespHandShake HeartBeatInterval.\n         * @member {number} HeartBeatInterval\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @instance\n         */\n        RespHandShake.prototype.HeartBeatInterval = 0;\n\n        /**\n         * RespHandShake Routes.\n         * @member {Object.<string,number>} Routes\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @instance\n         */\n        RespHandShake.prototype.Routes = $util.emptyObject;\n\n        /**\n         * Creates a new RespHandShake instance using the specified properties.\n         * @function create\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {GoPlay.Core.Protocols.IRespHandShake=} [properties] Properties to set\n         * @returns {GoPlay.Core.Protocols.RespHandShake} RespHandShake instance\n         */\n        RespHandShake.create = function create(properties) {\n          return new RespHandShake(properties);\n        };\n\n        /**\n         * Encodes the specified RespHandShake message. Does not implicitly {@link GoPlay.Core.Protocols.RespHandShake.verify|verify} messages.\n         * @function encode\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {GoPlay.Core.Protocols.IRespHandShake} message RespHandShake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespHandShake.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.ServerVersion != null && Object.hasOwnProperty.call(message, \"ServerVersion\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.ServerVersion);\n          if (message.HeartBeatInterval != null && Object.hasOwnProperty.call(message, \"HeartBeatInterval\")) writer.uint32( /* id 2, wireType 0 =*/16).uint32(message.HeartBeatInterval);\n          if (message.Routes != null && Object.hasOwnProperty.call(message, \"Routes\")) for (var keys = Object.keys(message.Routes), i = 0; i < keys.length; ++i) writer.uint32( /* id 3, wireType 2 =*/26).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 0 =*/16).uint32(message.Routes[keys[i]]).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified RespHandShake message, length delimited. Does not implicitly {@link GoPlay.Core.Protocols.RespHandShake.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {GoPlay.Core.Protocols.IRespHandShake} message RespHandShake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespHandShake.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespHandShake message from the specified reader or buffer.\n         * @function decode\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {GoPlay.Core.Protocols.RespHandShake} RespHandShake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespHandShake.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.GoPlay.Core.Protocols.RespHandShake(),\n            key,\n            value;\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                {\n                  message.ServerVersion = reader.string();\n                  break;\n                }\n              case 2:\n                {\n                  message.HeartBeatInterval = reader.uint32();\n                  break;\n                }\n              case 3:\n                {\n                  if (message.Routes === $util.emptyObject) message.Routes = {};\n                  var end2 = reader.uint32() + reader.pos;\n                  key = \"\";\n                  value = 0;\n                  while (reader.pos < end2) {\n                    var tag2 = reader.uint32();\n                    switch (tag2 >>> 3) {\n                      case 1:\n                        key = reader.string();\n                        break;\n                      case 2:\n                        value = reader.uint32();\n                        break;\n                      default:\n                        reader.skipType(tag2 & 7);\n                        break;\n                    }\n                  }\n                  message.Routes[key] = value;\n                  break;\n                }\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a RespHandShake message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {GoPlay.Core.Protocols.RespHandShake} RespHandShake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespHandShake.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespHandShake message.\n         * @function verify\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespHandShake.verify = function verify(message) {\n          if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n          if (message.ServerVersion != null && message.hasOwnProperty(\"ServerVersion\")) if (!$util.isString(message.ServerVersion)) return \"ServerVersion: string expected\";\n          if (message.HeartBeatInterval != null && message.hasOwnProperty(\"HeartBeatInterval\")) if (!$util.isInteger(message.HeartBeatInterval)) return \"HeartBeatInterval: integer expected\";\n          if (message.Routes != null && message.hasOwnProperty(\"Routes\")) {\n            if (!$util.isObject(message.Routes)) return \"Routes: object expected\";\n            var key = Object.keys(message.Routes);\n            for (var i = 0; i < key.length; ++i) if (!$util.isInteger(message.Routes[key[i]])) return \"Routes: integer{k:string} expected\";\n          }\n          return null;\n        };\n\n        /**\n         * Creates a RespHandShake message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {GoPlay.Core.Protocols.RespHandShake} RespHandShake\n         */\n        RespHandShake.fromObject = function fromObject(object) {\n          if (object instanceof $root.GoPlay.Core.Protocols.RespHandShake) return object;\n          var message = new $root.GoPlay.Core.Protocols.RespHandShake();\n          if (object.ServerVersion != null) message.ServerVersion = String(object.ServerVersion);\n          if (object.HeartBeatInterval != null) message.HeartBeatInterval = object.HeartBeatInterval >>> 0;\n          if (object.Routes) {\n            if (_typeof(object.Routes) !== \"object\") throw TypeError(\".GoPlay.Core.Protocols.RespHandShake.Routes: object expected\");\n            message.Routes = {};\n            for (var keys = Object.keys(object.Routes), i = 0; i < keys.length; ++i) message.Routes[keys[i]] = object.Routes[keys[i]] >>> 0;\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a RespHandShake message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {GoPlay.Core.Protocols.RespHandShake} message RespHandShake\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespHandShake.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.objects || options.defaults) object.Routes = {};\n          if (options.defaults) {\n            object.ServerVersion = \"\";\n            object.HeartBeatInterval = 0;\n          }\n          if (message.ServerVersion != null && message.hasOwnProperty(\"ServerVersion\")) object.ServerVersion = message.ServerVersion;\n          if (message.HeartBeatInterval != null && message.hasOwnProperty(\"HeartBeatInterval\")) object.HeartBeatInterval = message.HeartBeatInterval;\n          var keys2;\n          if (message.Routes && (keys2 = Object.keys(message.Routes)).length) {\n            object.Routes = {};\n            for (var j = 0; j < keys2.length; ++j) object.Routes[keys2[j]] = message.Routes[keys2[j]];\n          }\n          return object;\n        };\n\n        /**\n         * Converts this RespHandShake to JSON.\n         * @function toJSON\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespHandShake.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for RespHandShake\n         * @function getTypeUrl\n         * @memberof GoPlay.Core.Protocols.RespHandShake\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        RespHandShake.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n          if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n          }\n          return typeUrlPrefix + \"/GoPlay.Core.Protocols.RespHandShake\";\n        };\n        return RespHandShake;\n      }();\n      return Protocols;\n    }();\n    return Core;\n  }();\n  return GoPlay;\n}();\n$root.google = function () {\n  /**\n   * Namespace google.\n   * @exports google\n   * @namespace\n   */\n  var google = {};\n  google.protobuf = function () {\n    /**\n     * Namespace protobuf.\n     * @memberof google\n     * @namespace\n     */\n    var protobuf = {};\n    protobuf.Timestamp = function () {\n      /**\n       * Properties of a Timestamp.\n       * @memberof google.protobuf\n       * @interface ITimestamp\n       * @property {number|Long|null} [seconds] Timestamp seconds\n       * @property {number|null} [nanos] Timestamp nanos\n       */\n\n      /**\n       * Constructs a new Timestamp.\n       * @memberof google.protobuf\n       * @classdesc Represents a Timestamp.\n       * @implements ITimestamp\n       * @constructor\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       */\n      function Timestamp(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Timestamp seconds.\n       * @member {number|Long} seconds\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n      Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Timestamp nanos.\n       * @member {number} nanos\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n      Timestamp.prototype.nanos = 0;\n\n      /**\n       * Creates a new Timestamp instance using the specified properties.\n       * @function create\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       * @returns {google.protobuf.Timestamp} Timestamp instance\n       */\n      Timestamp.create = function create(properties) {\n        return new Timestamp(properties);\n      };\n\n      /**\n       * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Timestamp.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\")) writer.uint32( /* id 1, wireType 0 =*/8).int64(message.seconds);\n        if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.nanos);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer.\n       * @function decode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Timestamp.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.google.protobuf.Timestamp();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.seconds = reader.int64();\n                break;\n              }\n            case 2:\n              {\n                message.nanos = reader.int32();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Timestamp.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Timestamp message.\n       * @function verify\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Timestamp.verify = function verify(message) {\n        if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high))) return \"seconds: integer|Long expected\";\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) if (!$util.isInteger(message.nanos)) return \"nanos: integer expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {google.protobuf.Timestamp} Timestamp\n       */\n      Timestamp.fromObject = function fromObject(object) {\n        if (object instanceof $root.google.protobuf.Timestamp) return object;\n        var message = new $root.google.protobuf.Timestamp();\n        if (object.seconds != null) if ($util.Long) (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;else if (typeof object.seconds === \"string\") message.seconds = parseInt(object.seconds, 10);else if (typeof object.seconds === \"number\") message.seconds = object.seconds;else if (_typeof(object.seconds) === \"object\") message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n        if (object.nanos != null) message.nanos = object.nanos | 0;\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.Timestamp} message Timestamp\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Timestamp.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          if ($util.Long) {\n            var _long2 = new $util.Long(0, 0, false);\n            object.seconds = options.longs === String ? _long2.toString() : options.longs === Number ? _long2.toNumber() : _long2;\n          } else object.seconds = options.longs === String ? \"0\" : 0;\n          object.nanos = 0;\n        }\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (typeof message.seconds === \"number\") object.seconds = options.longs === String ? String(message.seconds) : message.seconds;else object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) object.nanos = message.nanos;\n        return object;\n      };\n\n      /**\n       * Converts this Timestamp to JSON.\n       * @function toJSON\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Timestamp.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Timestamp\n       * @function getTypeUrl\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = \"type.googleapis.com\";\n        }\n        return typeUrlPrefix + \"/google.protobuf.Timestamp\";\n      };\n      return Timestamp;\n    }();\n    protobuf.Any = function () {\n      /**\n       * Properties of an Any.\n       * @memberof google.protobuf\n       * @interface IAny\n       * @property {string|null} [type_url] Any type_url\n       * @property {Uint8Array|null} [value] Any value\n       */\n\n      /**\n       * Constructs a new Any.\n       * @memberof google.protobuf\n       * @classdesc Represents an Any.\n       * @implements IAny\n       * @constructor\n       * @param {google.protobuf.IAny=} [properties] Properties to set\n       */\n      function Any(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Any type_url.\n       * @member {string} type_url\n       * @memberof google.protobuf.Any\n       * @instance\n       */\n      Any.prototype.type_url = \"\";\n\n      /**\n       * Any value.\n       * @member {Uint8Array} value\n       * @memberof google.protobuf.Any\n       * @instance\n       */\n      Any.prototype.value = $util.newBuffer([]);\n\n      /**\n       * Creates a new Any instance using the specified properties.\n       * @function create\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {google.protobuf.IAny=} [properties] Properties to set\n       * @returns {google.protobuf.Any} Any instance\n       */\n      Any.create = function create(properties) {\n        return new Any(properties);\n      };\n\n      /**\n       * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.\n       * @function encode\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {google.protobuf.IAny} message Any message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Any.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.type_url != null && Object.hasOwnProperty.call(message, \"type_url\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.type_url);\n        if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 2, wireType 2 =*/18).bytes(message.value);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {google.protobuf.IAny} message Any message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Any.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an Any message from the specified reader or buffer.\n       * @function decode\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {google.protobuf.Any} Any\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Any.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.google.protobuf.Any();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.type_url = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.value = reader.bytes();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an Any message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {google.protobuf.Any} Any\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Any.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an Any message.\n       * @function verify\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Any.verify = function verify(message) {\n        if (_typeof(message) !== \"object\" || message === null) return \"object expected\";\n        if (message.type_url != null && message.hasOwnProperty(\"type_url\")) if (!$util.isString(message.type_url)) return \"type_url: string expected\";\n        if (message.value != null && message.hasOwnProperty(\"value\")) if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value))) return \"value: buffer expected\";\n        return null;\n      };\n\n      /**\n       * Creates an Any message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {google.protobuf.Any} Any\n       */\n      Any.fromObject = function fromObject(object) {\n        if (object instanceof $root.google.protobuf.Any) return object;\n        var message = new $root.google.protobuf.Any();\n        if (object.type_url != null) message.type_url = String(object.type_url);\n        if (object.value != null) if (typeof object.value === \"string\") $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);else if (object.value.length >= 0) message.value = object.value;\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an Any message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {google.protobuf.Any} message Any\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Any.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.type_url = \"\";\n          if (options.bytes === String) object.value = \"\";else {\n            object.value = [];\n            if (options.bytes !== Array) object.value = $util.newBuffer(object.value);\n          }\n        }\n        if (message.type_url != null && message.hasOwnProperty(\"type_url\")) object.type_url = message.type_url;\n        if (message.value != null && message.hasOwnProperty(\"value\")) object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n        return object;\n      };\n\n      /**\n       * Converts this Any to JSON.\n       * @function toJSON\n       * @memberof google.protobuf.Any\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Any.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Any\n       * @function getTypeUrl\n       * @memberof google.protobuf.Any\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = \"type.googleapis.com\";\n        }\n        return typeUrlPrefix + \"/google.protobuf.Any\";\n      };\n      return Any;\n    }();\n    return protobuf;\n  }();\n  return google;\n}();\nmodule.exports = $root;\n\n//# sourceURL=webpack://goplay.ts/./dist/pkg.pb.js?");

/***/ }),

/***/ "./node_modules/protobufjs/index.js":
/*!******************************************!*\
  !*** ./node_modules/protobufjs/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// full library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index */ \"./node_modules/protobufjs/src/index.js\");\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/index.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/common.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/common.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nmodule.exports = common;\n\nvar commonRe = /\\/|\\./;\n\n/**\n * Provides common type definitions.\n * Can also be used to provide additional google types or your own custom types.\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\n * @returns {undefined}\n * @property {INamespace} google/protobuf/any.proto Any\n * @property {INamespace} google/protobuf/duration.proto Duration\n * @property {INamespace} google/protobuf/empty.proto Empty\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\n * @example\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\n * protobuf.common(\"descriptor\", descriptorJson);\n *\n * // manually provides a custom definition (uses my.foo namespace)\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\n */\nfunction common(name, json) {\n    if (!commonRe.test(name)) {\n        name = \"google/protobuf/\" + name + \".proto\";\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\n    }\n    common[name] = json;\n}\n\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\n\ncommon(\"any\", {\n\n    /**\n     * Properties of a google.protobuf.Any message.\n     * @interface IAny\n     * @type {Object}\n     * @property {string} [typeUrl]\n     * @property {Uint8Array} [bytes]\n     * @memberof common\n     */\n    Any: {\n        fields: {\n            type_url: {\n                type: \"string\",\n                id: 1\n            },\n            value: {\n                type: \"bytes\",\n                id: 2\n            }\n        }\n    }\n});\n\nvar timeType;\n\ncommon(\"duration\", {\n\n    /**\n     * Properties of a google.protobuf.Duration message.\n     * @interface IDuration\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */\n    Duration: timeType = {\n        fields: {\n            seconds: {\n                type: \"int64\",\n                id: 1\n            },\n            nanos: {\n                type: \"int32\",\n                id: 2\n            }\n        }\n    }\n});\n\ncommon(\"timestamp\", {\n\n    /**\n     * Properties of a google.protobuf.Timestamp message.\n     * @interface ITimestamp\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */\n    Timestamp: timeType\n});\n\ncommon(\"empty\", {\n\n    /**\n     * Properties of a google.protobuf.Empty message.\n     * @interface IEmpty\n     * @memberof common\n     */\n    Empty: {\n        fields: {}\n    }\n});\n\ncommon(\"struct\", {\n\n    /**\n     * Properties of a google.protobuf.Struct message.\n     * @interface IStruct\n     * @type {Object}\n     * @property {Object.<string,IValue>} [fields]\n     * @memberof common\n     */\n    Struct: {\n        fields: {\n            fields: {\n                keyType: \"string\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Value message.\n     * @interface IValue\n     * @type {Object}\n     * @property {string} [kind]\n     * @property {0} [nullValue]\n     * @property {number} [numberValue]\n     * @property {string} [stringValue]\n     * @property {boolean} [boolValue]\n     * @property {IStruct} [structValue]\n     * @property {IListValue} [listValue]\n     * @memberof common\n     */\n    Value: {\n        oneofs: {\n            kind: {\n                oneof: [\n                    \"nullValue\",\n                    \"numberValue\",\n                    \"stringValue\",\n                    \"boolValue\",\n                    \"structValue\",\n                    \"listValue\"\n                ]\n            }\n        },\n        fields: {\n            nullValue: {\n                type: \"NullValue\",\n                id: 1\n            },\n            numberValue: {\n                type: \"double\",\n                id: 2\n            },\n            stringValue: {\n                type: \"string\",\n                id: 3\n            },\n            boolValue: {\n                type: \"bool\",\n                id: 4\n            },\n            structValue: {\n                type: \"Struct\",\n                id: 5\n            },\n            listValue: {\n                type: \"ListValue\",\n                id: 6\n            }\n        }\n    },\n\n    NullValue: {\n        values: {\n            NULL_VALUE: 0\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.ListValue message.\n     * @interface IListValue\n     * @type {Object}\n     * @property {Array.<IValue>} [values]\n     * @memberof common\n     */\n    ListValue: {\n        fields: {\n            values: {\n                rule: \"repeated\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    }\n});\n\ncommon(\"wrappers\", {\n\n    /**\n     * Properties of a google.protobuf.DoubleValue message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    DoubleValue: {\n        fields: {\n            value: {\n                type: \"double\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.FloatValue message.\n     * @interface IFloatValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    FloatValue: {\n        fields: {\n            value: {\n                type: \"float\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Int64Value message.\n     * @interface IInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */\n    Int64Value: {\n        fields: {\n            value: {\n                type: \"int64\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.UInt64Value message.\n     * @interface IUInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */\n    UInt64Value: {\n        fields: {\n            value: {\n                type: \"uint64\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.Int32Value message.\n     * @interface IInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    Int32Value: {\n        fields: {\n            value: {\n                type: \"int32\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.UInt32Value message.\n     * @interface IUInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    UInt32Value: {\n        fields: {\n            value: {\n                type: \"uint32\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.BoolValue message.\n     * @interface IBoolValue\n     * @type {Object}\n     * @property {boolean} [value]\n     * @memberof common\n     */\n    BoolValue: {\n        fields: {\n            value: {\n                type: \"bool\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.StringValue message.\n     * @interface IStringValue\n     * @type {Object}\n     * @property {string} [value]\n     * @memberof common\n     */\n    StringValue: {\n        fields: {\n            value: {\n                type: \"string\",\n                id: 1\n            }\n        }\n    },\n\n    /**\n     * Properties of a google.protobuf.BytesValue message.\n     * @interface IBytesValue\n     * @type {Object}\n     * @property {Uint8Array} [value]\n     * @memberof common\n     */\n    BytesValue: {\n        fields: {\n            value: {\n                type: \"bytes\",\n                id: 1\n            }\n        }\n    }\n});\n\ncommon(\"field_mask\", {\n\n    /**\n     * Properties of a google.protobuf.FieldMask message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */\n    FieldMask: {\n        fields: {\n            paths: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 1\n            }\n        }\n    }\n});\n\n/**\n * Gets the root definition of the specified common proto file.\n *\n * Bundled definitions are:\n * - google/protobuf/any.proto\n * - google/protobuf/duration.proto\n * - google/protobuf/empty.proto\n * - google/protobuf/field_mask.proto\n * - google/protobuf/struct.proto\n * - google/protobuf/timestamp.proto\n * - google/protobuf/wrappers.proto\n *\n * @param {string} file Proto file name\n * @returns {INamespace|null} Root definition or `null` if not defined\n */\ncommon.get = function get(file) {\n    return common[file] || null;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/common.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/converter.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/converter.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    util = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    var defaultAlreadyEmitted = false;\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                // enum unknown values passthrough\n                if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) { gen\n                    (\"default:\")\n                        (\"if(typeof(d%s)===\\\"number\\\"){m%s=d%s;break}\", prop, prop, prop);\n                    if (!field.repeated) gen // fallback to default value only for\n                                             // arrays, to avoid leaving holes.\n                        (\"break\");           // for non-repeated fields, just ignore\n                    defaultAlreadyEmitted = true;\n                }\n                gen\n                (\"case%j:\", keys[i])\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else gen\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-next-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(util.Long)\")\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\n                    (\"m%s=d%s\", prop, prop)\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length >= 0)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen\n    (\"}\");\n        }\n    } return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s\", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-next-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\n            (\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    (\"if(!o)\")\n        (\"o={}\")\n    (\"var d={}\");\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen\n        (\"if(util.Long){\")\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\n        (\"}else\")\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n        (\"else{\")\n            (\"d%s=%s\", prop, arrayDefault)\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n        (\"}\");\n            } else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    return gen\n    (\"return d\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/converter.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/decoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/decoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = decoder;\n\nvar Enum    = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    types   = __webpack_require__(/*! ./types */ \"./node_modules/protobufjs/src/types.js\"),\n    util    = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\n    (\"if(!(r instanceof Reader))\")\n        (\"r=Reader.create(r)\")\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k,value\" : \"\"))\n    (\"while(r.pos<c){\")\n        (\"var t=r.uint32()\");\n    if (mtype.group) gen\n        (\"if((t&7)===4)\")\n            (\"break\");\n    gen\n        (\"switch(t>>>3){\");\n\n    var i = 0;\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            ref   = \"m\" + util.safeProp(field.name); gen\n            (\"case %i: {\", field.id);\n\n        // Map fields\n        if (field.map) { gen\n                (\"if(%s===util.emptyObject)\", ref)\n                    (\"%s={}\", ref)\n                (\"var c2 = r.uint32()+r.pos\");\n\n            if (types.defaults[field.keyType] !== undefined) gen\n                (\"k=%j\", types.defaults[field.keyType]);\n            else gen\n                (\"k=null\");\n\n            if (types.defaults[type] !== undefined) gen\n                (\"value=%j\", types.defaults[type]);\n            else gen\n                (\"value=null\");\n\n            gen\n                (\"while(r.pos<c2){\")\n                    (\"var tag2=r.uint32()\")\n                    (\"switch(tag2>>>3){\")\n                        (\"case 1: k=r.%s(); break\", field.keyType)\n                        (\"case 2:\");\n\n            if (types.basic[type] === undefined) gen\n                            (\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n            else gen\n                            (\"value=r.%s()\", type);\n\n            gen\n                            (\"break\")\n                        (\"default:\")\n                            (\"r.skipType(tag2&7)\")\n                            (\"break\")\n                    (\"}\")\n                (\"}\");\n\n            if (types.long[field.keyType] !== undefined) gen\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=value\", ref);\n            else gen\n                (\"%s[k]=value\", ref);\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n\n                (\"if(!(%s&&%s.length))\", ref, ref)\n                    (\"%s=[]\", ref);\n\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen\n                (\"if((t&7)===2){\")\n                    (\"var c2=r.uint32()+r.pos\")\n                    (\"while(r.pos<c2)\")\n                        (\"%s.push(r.%s())\", ref, type)\n                (\"}else\");\n\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\n                    ? \"%s.push(types[%i].decode(r))\"\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen\n                    (\"%s.push(r.%s())\", ref, type);\n\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\n                ? \"%s=types[%i].decode(r)\"\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen\n                (\"%s=r.%s()\", ref, type);\n        gen\n                (\"break\")\n            (\"}\");\n        // Unknown fields\n    } gen\n            (\"default:\")\n                (\"r.skipType(t&7)\")\n                (\"break\")\n\n        (\"}\")\n    (\"}\");\n\n    // Field presence\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n\n    return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline */\n}\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/decoder.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/encoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/encoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = encoder;\n\nvar Enum     = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    types    = __webpack_require__(/*! ./types */ \"./node_modules/protobufjs/src/types.js\"),\n    util     = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n    return field.resolvedType.group\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\n    (\"if(!w)\")\n        (\"w=Writer.create()\");\n\n    var i, ref;\n\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n\n    for (var i = 0; i < fields.length; ++i) {\n        var field    = fields[i].resolve(),\n            index    = mtype._fieldsArray.indexOf(field),\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            wireType = types.basic[type];\n            ref      = \"m\" + util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) {\n            gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen\n        (\"}\")\n    (\"}\");\n\n            // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) { gen\n\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\n        (\"for(var i=0;i<%s.length;++i)\", ref)\n            (\"w.%s(%s[i])\", type, ref)\n        (\"w.ldelim()\");\n\n            // Non-packed\n            } else { gen\n\n        (\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined)\n            genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n            } gen\n    (\"}\");\n\n        // Non-repeated\n        } else {\n            if (field.optional) gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n            if (wireType === undefined)\n        genTypePartial(gen, field, index, ref);\n            else gen\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n        }\n    }\n\n    return gen\n    (\"return w\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/encoder.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/enum.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/enum.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"./node_modules/protobufjs/src/object.js\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = __webpack_require__(/*! ./namespace */ \"./node_modules/protobufjs/src/namespace.js\"),\n    util = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\n */\nfunction Enum(name, values, options, comment, comments, valuesOptions) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Values options, if any\n     * @type {Object<string, Object<string, *>>|undefined}\n     */\n    this.valuesOptions = valuesOptions;\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"       , this.options,\n        \"valuesOptions\" , this.valuesOptions,\n        \"values\"        , this.values,\n        \"reserved\"      , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"       , keepComments ? this.comment : undefined,\n        \"comments\"      , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @param {Object.<string, *>|undefined} [options] Options, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment, options) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    if (options) {\n        if (this.valuesOptions === undefined)\n            this.valuesOptions = {};\n        this.valuesOptions[name] = options || null;\n    }\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n    if (this.valuesOptions)\n        delete this.valuesOptions[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/enum.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/field.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/field.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"./node_modules/protobufjs/src/object.js\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    types = __webpack_require__(/*! ./types */ \"./node_modules/protobufjs/src/types.js\"),\n    util  = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    } else if (this.options && this.options.proto3_optional) {\n        // proto3 scalar value marked optional; should default to null\n        this.typeDefault = null;\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/field.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-light.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/index-light.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar protobuf = module.exports = __webpack_require__(/*! ./index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = __webpack_require__(/*! ./encoder */ \"./node_modules/protobufjs/src/encoder.js\");\nprotobuf.decoder          = __webpack_require__(/*! ./decoder */ \"./node_modules/protobufjs/src/decoder.js\");\nprotobuf.verifier         = __webpack_require__(/*! ./verifier */ \"./node_modules/protobufjs/src/verifier.js\");\nprotobuf.converter        = __webpack_require__(/*! ./converter */ \"./node_modules/protobufjs/src/converter.js\");\n\n// Reflection\nprotobuf.ReflectionObject = __webpack_require__(/*! ./object */ \"./node_modules/protobufjs/src/object.js\");\nprotobuf.Namespace        = __webpack_require__(/*! ./namespace */ \"./node_modules/protobufjs/src/namespace.js\");\nprotobuf.Root             = __webpack_require__(/*! ./root */ \"./node_modules/protobufjs/src/root.js\");\nprotobuf.Enum             = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\");\nprotobuf.Type             = __webpack_require__(/*! ./type */ \"./node_modules/protobufjs/src/type.js\");\nprotobuf.Field            = __webpack_require__(/*! ./field */ \"./node_modules/protobufjs/src/field.js\");\nprotobuf.OneOf            = __webpack_require__(/*! ./oneof */ \"./node_modules/protobufjs/src/oneof.js\");\nprotobuf.MapField         = __webpack_require__(/*! ./mapfield */ \"./node_modules/protobufjs/src/mapfield.js\");\nprotobuf.Service          = __webpack_require__(/*! ./service */ \"./node_modules/protobufjs/src/service.js\");\nprotobuf.Method           = __webpack_require__(/*! ./method */ \"./node_modules/protobufjs/src/method.js\");\n\n// Runtime\nprotobuf.Message          = __webpack_require__(/*! ./message */ \"./node_modules/protobufjs/src/message.js\");\nprotobuf.wrappers         = __webpack_require__(/*! ./wrappers */ \"./node_modules/protobufjs/src/wrappers.js\");\n\n// Utility\nprotobuf.types            = __webpack_require__(/*! ./types */ \"./node_modules/protobufjs/src/types.js\");\nprotobuf.util             = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/index-light.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar protobuf = module.exports = __webpack_require__(/*! ./index-light */ \"./node_modules/protobufjs/src/index-light.js\");\n\nprotobuf.build = \"full\";\n\n// Parser\nprotobuf.tokenize         = __webpack_require__(/*! ./tokenize */ \"./node_modules/protobufjs/src/tokenize.js\");\nprotobuf.parse            = __webpack_require__(/*! ./parse */ \"./node_modules/protobufjs/src/parse.js\");\nprotobuf.common           = __webpack_require__(/*! ./common */ \"./node_modules/protobufjs/src/common.js\");\n\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/index.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/mapfield.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/mapfield.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = MapField;\n\n// extends Field\nvar Field = __webpack_require__(/*! ./field */ \"./node_modules/protobufjs/src/field.js\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = __webpack_require__(/*! ./types */ \"./node_modules/protobufjs/src/types.js\"),\n    util    = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/mapfield.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/message.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/message.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Message;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n    // not used internally\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n    return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/message.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/method.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/method.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"./node_modules/protobufjs/src/object.js\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Options properly parsed into an object\n     */\n    this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined,\n        \"parsedOptions\"  , this.parsedOptions,\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/method.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/namespace.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/namespace.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"./node_modules/protobufjs/src/object.js\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Field    = __webpack_require__(/*! ./field */ \"./node_modules/protobufjs/src/field.js\"),\n    util     = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\"),\n    OneOf    = __webpack_require__(/*! ./oneof */ \"./node_modules/protobufjs/src/oneof.js\");\n\nvar Type,    // cyclic\n    Service,\n    Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}\n */\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n            ns.add( // most to least likely\n                ( nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                ? Field.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type  || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    object.onRemove(this);\n    return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n\n    if (util.isString(path))\n        path = path.split(\".\");\n    else if (!Array.isArray(path))\n        throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\")\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    while (path.length > 0) {\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace))\n                throw Error(\"path conflicts with non-namespace objects\");\n        } else\n            ptr.add(ptr = new Namespace(part));\n    }\n    if (json)\n        ptr.addJSON(json);\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    if (found) {\n        if (path.length === 1) {\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n                return found;\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type: \" + path);\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type    = Type_;\n    Service = Service_;\n    Enum    = Enum_;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/namespace.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/object.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/object.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = ReflectionObject;\n\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (options && !util.isObject(options))\n        throw TypeError(\"options must be an object\");\n\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */\n    this.options = options; // toJSON\n\n    /**\n     * Parsed Options.\n     * @type {Array.<Object.<string,*>>|undefined}\n     */\n    this.parsedOptions = null;\n\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */\n    this.parent = null;\n\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */\n    this.resolved = false;\n\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */\n    this.comment = null;\n\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */\n    this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */\n    root: {\n        get: function() {\n            var ptr = this;\n            while (ptr.parent !== null)\n                ptr = ptr.parent;\n            return ptr;\n        }\n    },\n\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */\n    fullName: {\n        get: function() {\n            var path = [ this.name ],\n                ptr = this.parent;\n            while (ptr) {\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent)\n        this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n    if (this.root instanceof Root)\n        this.resolved = true; // only if part of a root\n    return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options)\n        return this.options[name];\n    return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\n        (this.options || (this.options = {}))[name] = value;\n    return this;\n};\n\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n    if (!this.parsedOptions) {\n        this.parsedOptions = [];\n    }\n    var parsedOptions = this.parsedOptions;\n    if (propName) {\n        // If setting a sub property of an option then try to merge it\n        // with an existing option\n        var opt = parsedOptions.find(function (opt) {\n            return Object.prototype.hasOwnProperty.call(opt, name);\n        });\n        if (opt) {\n            // If we found an existing option - just merge the property value\n            var newValue = opt[name];\n            util.setProperty(newValue, propName, value);\n        } else {\n            // otherwise, create a new option, set it's property and add it to the list\n            opt = {};\n            opt[name] = util.setProperty({}, propName, value);\n            parsedOptions.push(opt);\n        }\n    } else {\n        // Always create a new option when setting the value of the option itself\n        var newOpt = {};\n        newOpt[name] = value;\n        parsedOptions.push(newOpt);\n    }\n    return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options)\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className,\n        fullName  = this.fullName;\n    if (fullName.length)\n        return className + \" \" + fullName;\n    return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/object.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/oneof.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/oneof.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"./node_modules/protobufjs/src/object.js\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = __webpack_require__(/*! ./field */ \"./node_modules/protobufjs/src/field.js\"),\n    util  = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/oneof.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/parse.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/parse.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = parse;\n\nparse.filename = null;\nparse.defaults = { keepCase: false };\n\nvar tokenize  = __webpack_require__(/*! ./tokenize */ \"./node_modules/protobufjs/src/tokenize.js\"),\n    Root      = __webpack_require__(/*! ./root */ \"./node_modules/protobufjs/src/root.js\"),\n    Type      = __webpack_require__(/*! ./type */ \"./node_modules/protobufjs/src/type.js\"),\n    Field     = __webpack_require__(/*! ./field */ \"./node_modules/protobufjs/src/field.js\"),\n    MapField  = __webpack_require__(/*! ./mapfield */ \"./node_modules/protobufjs/src/mapfield.js\"),\n    OneOf     = __webpack_require__(/*! ./oneof */ \"./node_modules/protobufjs/src/oneof.js\"),\n    Enum      = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    Service   = __webpack_require__(/*! ./service */ \"./node_modules/protobufjs/src/service.js\"),\n    Method    = __webpack_require__(/*! ./method */ \"./node_modules/protobufjs/src/method.js\"),\n    types     = __webpack_require__(/*! ./types */ \"./node_modules/protobufjs/src/types.js\"),\n    util      = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\nvar base10Re    = /^[1-9][0-9]*$/,\n    base10NegRe = /^-?[1-9][0-9]*$/,\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n    base8Re     = /^0[0-7]+$/,\n    base8NegRe  = /^-?0[0-7]+$/,\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n * @property {Root} root Populated root instance\n */\n\n/**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */\n\n/**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */\nfunction parse(source, root, options) {\n    /* eslint-disable callback-return */\n    if (!(root instanceof Root)) {\n        options = root;\n        root = new Root();\n    }\n    if (!options)\n        options = parse.defaults;\n\n    var preferTrailingComment = options.preferTrailingComment || false;\n    var tn = tokenize(source, options.alternateCommentMode || false),\n        next = tn.next,\n        push = tn.push,\n        peek = tn.peek,\n        skip = tn.skip,\n        cmnt = tn.cmnt;\n\n    var head = true,\n        pkg,\n        imports,\n        weakImports,\n        syntax,\n        isProto3 = false;\n\n    var ptr = root;\n\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\n\n    /* istanbul ignore next */\n    function illegal(token, name, insideTryCatch) {\n        var filename = parse.filename;\n        if (!insideTryCatch)\n            parse.filename = null;\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n    }\n\n    function readString() {\n        var values = [],\n            token;\n        do {\n            /* istanbul ignore if */\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\n                throw illegal(token);\n\n            values.push(next());\n            skip(token);\n            token = peek();\n        } while (token === \"\\\"\" || token === \"'\");\n        return values.join(\"\");\n    }\n\n    function readValue(acceptTypeRef) {\n        var token = next();\n        switch (token) {\n            case \"'\":\n            case \"\\\"\":\n                push(token);\n                return readString();\n            case \"true\": case \"TRUE\":\n                return true;\n            case \"false\": case \"FALSE\":\n                return false;\n        }\n        try {\n            return parseNumber(token, /* insideTryCatch */ true);\n        } catch (e) {\n\n            /* istanbul ignore else */\n            if (acceptTypeRef && typeRefRe.test(token))\n                return token;\n\n            /* istanbul ignore next */\n            throw illegal(token, \"value\");\n        }\n    }\n\n    function readRanges(target, acceptStrings) {\n        var token, start;\n        do {\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\n                target.push(readString());\n            else\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\n        } while (skip(\",\", true));\n        skip(\";\");\n    }\n\n    function parseNumber(token, insideTryCatch) {\n        var sign = 1;\n        if (token.charAt(0) === \"-\") {\n            sign = -1;\n            token = token.substring(1);\n        }\n        switch (token) {\n            case \"inf\": case \"INF\": case \"Inf\":\n                return sign * Infinity;\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\n                return NaN;\n            case \"0\":\n                return 0;\n        }\n        if (base10Re.test(token))\n            return sign * parseInt(token, 10);\n        if (base16Re.test(token))\n            return sign * parseInt(token, 16);\n        if (base8Re.test(token))\n            return sign * parseInt(token, 8);\n\n        /* istanbul ignore else */\n        if (numberRe.test(token))\n            return sign * parseFloat(token);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"number\", insideTryCatch);\n    }\n\n    function parseId(token, acceptNegative) {\n        switch (token) {\n            case \"max\": case \"MAX\": case \"Max\":\n                return 536870911;\n            case \"0\":\n                return 0;\n        }\n\n        /* istanbul ignore if */\n        if (!acceptNegative && token.charAt(0) === \"-\")\n            throw illegal(token, \"id\");\n\n        if (base10NegRe.test(token))\n            return parseInt(token, 10);\n        if (base16NegRe.test(token))\n            return parseInt(token, 16);\n\n        /* istanbul ignore else */\n        if (base8NegRe.test(token))\n            return parseInt(token, 8);\n\n        /* istanbul ignore next */\n        throw illegal(token, \"id\");\n    }\n\n    function parsePackage() {\n\n        /* istanbul ignore if */\n        if (pkg !== undefined)\n            throw illegal(\"package\");\n\n        pkg = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(pkg))\n            throw illegal(pkg, \"name\");\n\n        ptr = ptr.define(pkg);\n        skip(\";\");\n    }\n\n    function parseImport() {\n        var token = peek();\n        var whichImports;\n        switch (token) {\n            case \"weak\":\n                whichImports = weakImports || (weakImports = []);\n                next();\n                break;\n            case \"public\":\n                next();\n                // eslint-disable-next-line no-fallthrough\n            default:\n                whichImports = imports || (imports = []);\n                break;\n        }\n        token = readString();\n        skip(\";\");\n        whichImports.push(token);\n    }\n\n    function parseSyntax() {\n        skip(\"=\");\n        syntax = readString();\n        isProto3 = syntax === \"proto3\";\n\n        /* istanbul ignore if */\n        if (!isProto3 && syntax !== \"proto2\")\n            throw illegal(syntax, \"syntax\");\n\n        skip(\";\");\n    }\n\n    function parseCommon(parent, token) {\n        switch (token) {\n\n            case \"option\":\n                parseOption(parent, token);\n                skip(\";\");\n                return true;\n\n            case \"message\":\n                parseType(parent, token);\n                return true;\n\n            case \"enum\":\n                parseEnum(parent, token);\n                return true;\n\n            case \"service\":\n                parseService(parent, token);\n                return true;\n\n            case \"extend\":\n                parseExtension(parent, token);\n                return true;\n        }\n        return false;\n    }\n\n    function ifBlock(obj, fnIf, fnElse) {\n        var trailingLine = tn.line;\n        if (obj) {\n            if(typeof obj.comment !== \"string\") {\n              obj.comment = cmnt(); // try block-type comment\n            }\n            obj.filename = parse.filename;\n        }\n        if (skip(\"{\", true)) {\n            var token;\n            while ((token = next()) !== \"}\")\n                fnIf(token);\n            skip(\";\", true);\n        } else {\n            if (fnElse)\n                fnElse();\n            skip(\";\");\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment))\n                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n        }\n    }\n\n    function parseType(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"type name\");\n\n        var type = new Type(token);\n        ifBlock(type, function parseType_block(token) {\n            if (parseCommon(type, token))\n                return;\n\n            switch (token) {\n\n                case \"map\":\n                    parseMapField(type, token);\n                    break;\n\n                case \"required\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                case \"optional\":\n                    /* istanbul ignore if */\n                    if (isProto3) {\n                        parseField(type, \"proto3_optional\");\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n\n                case \"oneof\":\n                    parseOneOf(type, token);\n                    break;\n\n                case \"extensions\":\n                    readRanges(type.extensions || (type.extensions = []));\n                    break;\n\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n\n                    push(token);\n                    parseField(type, \"optional\");\n                    break;\n            }\n        });\n        parent.add(type);\n    }\n\n    function parseField(parent, rule, extend) {\n        var type = next();\n        if (type === \"group\") {\n            parseGroup(parent, rule);\n            return;\n        }\n        // Type names can consume multiple tokens, in multiple variants:\n        //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        // Keep reading tokens until we get a type name with no period at the end,\n        // and the next token does not start with a period.\n        while (type.endsWith(\".\") || peek().startsWith(\".\")) {\n            type += next();\n        }\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(type))\n            throw illegal(type, \"type\");\n\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        name = applyCase(name);\n        skip(\"=\");\n\n        var field = new Field(name, parseId(next()), type, rule, extend);\n        ifBlock(field, function parseField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseField_line() {\n            parseInlineOptions(field);\n        });\n\n        if (rule === \"proto3_optional\") {\n            // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n            var oneof = new OneOf(\"_\" + name);\n            field.setOption(\"proto3_optional\", true);\n            oneof.add(field);\n            parent.add(oneof);\n        } else {\n            parent.add(field);\n        }\n\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\n        // all known packable types and anything that could be an enum (= is not a basic type).\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\n    }\n\n    function parseGroup(parent, rule) {\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        var fieldName = util.lcFirst(name);\n        if (name === fieldName)\n            name = util.ucFirst(name);\n        skip(\"=\");\n        var id = parseId(next());\n        var type = new Type(name);\n        type.group = true;\n        var field = new Field(fieldName, id, name, rule);\n        field.filename = parse.filename;\n        ifBlock(type, function parseGroup_block(token) {\n            switch (token) {\n\n                case \"option\":\n                    parseOption(type, token);\n                    skip(\";\");\n                    break;\n\n                case \"required\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n\n                case \"optional\":\n                    /* istanbul ignore if */\n                    if (isProto3) {\n                        parseField(type, \"proto3_optional\");\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n\n                case \"message\":\n                    parseType(type, token);\n                    break;\n\n                case \"enum\":\n                    parseEnum(type, token);\n                    break;\n\n                /* istanbul ignore next */\n                default:\n                    throw illegal(token); // there are no groups with proto3 semantics\n            }\n        });\n        parent.add(type)\n              .add(field);\n    }\n\n    function parseMapField(parent) {\n        skip(\"<\");\n        var keyType = next();\n\n        /* istanbul ignore if */\n        if (types.mapKey[keyType] === undefined)\n            throw illegal(keyType, \"type\");\n\n        skip(\",\");\n        var valueType = next();\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(valueType))\n            throw illegal(valueType, \"type\");\n\n        skip(\">\");\n        var name = next();\n\n        /* istanbul ignore if */\n        if (!nameRe.test(name))\n            throw illegal(name, \"name\");\n\n        skip(\"=\");\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n        ifBlock(field, function parseMapField_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseMapField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n    }\n\n    function parseOneOf(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var oneof = new OneOf(applyCase(token));\n        ifBlock(oneof, function parseOneOf_block(token) {\n            if (token === \"option\") {\n                parseOption(oneof, token);\n                skip(\";\");\n            } else {\n                push(token);\n                parseField(oneof, \"optional\");\n            }\n        });\n        parent.add(oneof);\n    }\n\n    function parseEnum(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var enm = new Enum(token);\n        ifBlock(enm, function parseEnum_block(token) {\n          switch(token) {\n            case \"option\":\n              parseOption(enm, token);\n              skip(\";\");\n              break;\n\n            case \"reserved\":\n              readRanges(enm.reserved || (enm.reserved = []), true);\n              break;\n\n            default:\n              parseEnumValue(enm, token);\n          }\n        });\n        parent.add(enm);\n    }\n\n    function parseEnumValue(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token))\n            throw illegal(token, \"name\");\n\n        skip(\"=\");\n        var value = parseId(next(), true),\n            dummy = {\n                options: undefined\n            };\n        dummy.setOption = function(name, value) {\n            if (this.options === undefined)\n                this.options = {};\n            this.options[name] = value;\n        };\n        ifBlock(dummy, function parseEnumValue_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        }, function parseEnumValue_line() {\n            parseInlineOptions(dummy); // skip\n        });\n        parent.add(token, value, dummy.comment, dummy.options);\n    }\n\n    function parseOption(parent, token) {\n        var isCustom = skip(\"(\", true);\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token;\n        var option = name;\n        var propName;\n\n        if (isCustom) {\n            skip(\")\");\n            name = \"(\" + name + \")\";\n            option = name;\n            token = peek();\n            if (fqTypeRefRe.test(token)) {\n                propName = token.slice(1); //remove '.' before property name\n                name += token;\n                next();\n            }\n        }\n        skip(\"=\");\n        var optionValue = parseOptionValue(parent, name);\n        setParsedOption(parent, option, optionValue, propName);\n    }\n\n    function parseOptionValue(parent, name) {\n        // { a: \"foo\" b { c: \"bar\" } }\n        if (skip(\"{\", true)) {\n            var objectResult = {};\n\n            while (!skip(\"}\", true)) {\n                /* istanbul ignore if */\n                if (!nameRe.test(token = next())) {\n                    throw illegal(token, \"name\");\n                }\n                if (token === null) {\n                  throw illegal(token, \"end of input\");\n                }\n\n                var value;\n                var propName = token;\n\n                skip(\":\", true);\n\n                if (peek() === \"{\")\n                    value = parseOptionValue(parent, name + \".\" + token);\n                else if (peek() === \"[\") {\n                    // option (my_option) = {\n                    //     repeated_value: [ \"foo\", \"bar\" ]\n                    // };\n                    value = [];\n                    var lastValue;\n                    if (skip(\"[\", true)) {\n                        do {\n                            lastValue = readValue(true);\n                            value.push(lastValue);\n                        } while (skip(\",\", true));\n                        skip(\"]\");\n                        if (typeof lastValue !== \"undefined\") {\n                            setOption(parent, name + \".\" + token, lastValue);\n                        }\n                    }\n                } else {\n                    value = readValue(true);\n                    setOption(parent, name + \".\" + token, value);\n                }\n\n                var prevValue = objectResult[propName];\n\n                if (prevValue)\n                    value = [].concat(prevValue).concat(value);\n\n                objectResult[propName] = value;\n\n                // Semicolons and commas can be optional\n                skip(\",\", true);\n                skip(\";\", true);\n            }\n\n            return objectResult;\n        }\n\n        var simpleValue = readValue(true);\n        setOption(parent, name, simpleValue);\n        return simpleValue;\n        // Does not enforce a delimiter to be universal\n    }\n\n    function setOption(parent, name, value) {\n        if (parent.setOption)\n            parent.setOption(name, value);\n    }\n\n    function setParsedOption(parent, name, value, propName) {\n        if (parent.setParsedOption)\n            parent.setParsedOption(name, value, propName);\n    }\n\n    function parseInlineOptions(parent) {\n        if (skip(\"[\", true)) {\n            do {\n                parseOption(parent, \"option\");\n            } while (skip(\",\", true));\n            skip(\"]\");\n        }\n        return parent;\n    }\n\n    function parseService(parent, token) {\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"service name\");\n\n        var service = new Service(token);\n        ifBlock(service, function parseService_block(token) {\n            if (parseCommon(service, token))\n                return;\n\n            /* istanbul ignore else */\n            if (token === \"rpc\")\n                parseMethod(service, token);\n            else\n                throw illegal(token);\n        });\n        parent.add(service);\n    }\n\n    function parseMethod(parent, token) {\n        // Get the comment of the preceding line now (if one exists) in case the\n        // method is defined across multiple lines.\n        var commentText = cmnt();\n\n        var type = token;\n\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next()))\n            throw illegal(token, \"name\");\n\n        var name = token,\n            requestType, requestStream,\n            responseType, responseStream;\n\n        skip(\"(\");\n        if (skip(\"stream\", true))\n            requestStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        requestType = token;\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\n        if (skip(\"stream\", true))\n            responseStream = true;\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token);\n\n        responseType = token;\n        skip(\")\");\n\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n        method.comment = commentText;\n        ifBlock(method, function parseMethod_block(token) {\n\n            /* istanbul ignore else */\n            if (token === \"option\") {\n                parseOption(method, token);\n                skip(\";\");\n            } else\n                throw illegal(token);\n\n        });\n        parent.add(method);\n    }\n\n    function parseExtension(parent, token) {\n\n        /* istanbul ignore if */\n        if (!typeRefRe.test(token = next()))\n            throw illegal(token, \"reference\");\n\n        var reference = token;\n        ifBlock(null, function parseExtension_block(token) {\n            switch (token) {\n\n                case \"required\":\n                case \"repeated\":\n                    parseField(parent, token, reference);\n                    break;\n\n                case \"optional\":\n                    /* istanbul ignore if */\n                    if (isProto3) {\n                        parseField(parent, \"proto3_optional\", reference);\n                    } else {\n                        parseField(parent, \"optional\", reference);\n                    }\n                    break;\n\n                default:\n                    /* istanbul ignore if */\n                    if (!isProto3 || !typeRefRe.test(token))\n                        throw illegal(token);\n                    push(token);\n                    parseField(parent, \"optional\", reference);\n                    break;\n            }\n        });\n    }\n\n    var token;\n    while ((token = next()) !== null) {\n        switch (token) {\n\n            case \"package\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parsePackage();\n                break;\n\n            case \"import\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseImport();\n                break;\n\n            case \"syntax\":\n\n                /* istanbul ignore if */\n                if (!head)\n                    throw illegal(token);\n\n                parseSyntax();\n                break;\n\n            case \"option\":\n\n                parseOption(ptr, token);\n                skip(\";\");\n                break;\n\n            default:\n\n                /* istanbul ignore else */\n                if (parseCommon(ptr, token)) {\n                    head = false;\n                    continue;\n                }\n\n                /* istanbul ignore next */\n                throw illegal(token);\n        }\n    }\n\n    parse.filename = null;\n    return {\n        \"package\"     : pkg,\n        \"imports\"     : imports,\n         weakImports  : weakImports,\n         syntax       : syntax,\n         root         : root\n    };\n}\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/parse.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/root.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/root.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"./node_modules/protobufjs/src/namespace.js\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = __webpack_require__(/*! ./field */ \"./node_modules/protobufjs/src/field.js\"),\n    Enum    = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    OneOf   = __webpack_require__(/*! ./oneof */ \"./node_modules/protobufjs/src/oneof.js\"),\n    util    = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n        filename = getBundledFileName(filename) || filename;\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        //do not allow to extend same field twice to prevent the error\n        if (extendedType.get(sisterField.name)) {\n            return true;\n        }\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/root.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/service.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/service.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"./node_modules/protobufjs/src/namespace.js\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = __webpack_require__(/*! ./method */ \"./node_modules/protobufjs/src/method.js\"),\n    util   = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\"),\n    rpc    = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/tokenize.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/tokenize.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nmodule.exports = tokenize;\n\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\n\nvar setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\n\nvar unescapeMap = {\n    \"0\": \"\\0\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch ($1) {\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\n\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */\n    source = source.toString();\n\n    var offset = 0,\n        length = source.length,\n        line = 1,\n        lastCommentLine = 0,\n        comments = {};\n\n    var stack = [];\n\n    var stringDelim = null;\n\n    /* istanbul ignore next */\n    /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */\n    function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */\n    function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match)\n            throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */\n    function charAt(pos) {\n        return source.charAt(pos);\n    }\n\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */\n    function setComment(start, end, isLeading) {\n        var comment = {\n            type: source.charAt(start++),\n            lineEmpty: false,\n            leading: isLeading,\n        };\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3;  // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback,\n            c;\n        do {\n            if (--commentOffset < 0 ||\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\n                comment.lineEmpty = true;\n                break;\n            }\n        } while (c === \" \" || c === \"\\t\");\n        var lines = source\n            .substring(start, end)\n            .split(setCommentSplitRe);\n        for (var i = 0; i < lines.length; ++i)\n            lines[i] = lines[i]\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\n                .trim();\n        comment.text = lines\n            .join(\"\\n\")\n            .trim();\n\n        comments[line] = comment;\n        lastCommentLine = line;\n    }\n\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        var isComment = /^\\s*\\/\\//.test(lineText);\n        return isComment;\n    }\n\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n            endOffset++;\n        }\n        return endOffset;\n    }\n\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */\n    function next() {\n        if (stack.length > 0)\n            return stack.shift();\n        if (stringDelim)\n            return readString();\n        var repeat,\n            prev,\n            curr,\n            start,\n            isDoc,\n            isLeadingComment = offset === 0;\n        do {\n            if (offset === length)\n                return null;\n            repeat = false;\n            while (whitespaceRe.test(curr = charAt(offset))) {\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length)\n                    return null;\n            }\n\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") { // Line\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n\n                        while (charAt(++offset) !== \"\\n\") {\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                            // Trailing comment cannot not be multi-line,\n                            // so leading comment state should be reset to handle potential next comments\n                            isLeadingComment = true;\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset - 1)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                                if (!isLeadingComment) {\n                                    // Trailing comment cannot not be multi-line\n                                    break;\n                                }\n                            } while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                            isLeadingComment = true;\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    } while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                        isLeadingComment = true;\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        } while (repeat);\n\n        // offset !== length if we got here\n\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim)\n            while (end < length && !delimRe.test(charAt(end)))\n                ++end;\n        var token = source.substring(offset, offset = end);\n        if (token === \"\\\"\" || token === \"'\")\n            stringDelim = token;\n        return token;\n    }\n\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */\n    function push(token) {\n        stack.push(token);\n    }\n\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */\n    function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null)\n                return null;\n            push(token);\n        }\n        return stack[0];\n    }\n\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */\n    function skip(expected, optional) {\n        var actual = peek(),\n            equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional)\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */\n    function cmnt(trailingLine) {\n        var ret = null;\n        var comment;\n        if (trailingLine === undefined) {\n            comment = comments[line - 1];\n            delete comments[line - 1];\n            if (comment && (alternateCommentMode || comment.type === \"*\" || comment.lineEmpty)) {\n                ret = comment.leading ? comment.text : null;\n            }\n        } else {\n            /* istanbul ignore else */\n            if (lastCommentLine < trailingLine) {\n                peek();\n            }\n            comment = comments[trailingLine];\n            delete comments[trailingLine];\n            if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === \"/\")) {\n                ret = comment.leading ? null : comment.text;\n            }\n        }\n        return ret;\n    }\n\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() { return line; }\n    });\n    /* eslint-enable callback-return */\n}\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/tokenize.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/type.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/type.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"./node_modules/protobufjs/src/namespace.js\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    OneOf     = __webpack_require__(/*! ./oneof */ \"./node_modules/protobufjs/src/oneof.js\"),\n    Field     = __webpack_require__(/*! ./field */ \"./node_modules/protobufjs/src/field.js\"),\n    MapField  = __webpack_require__(/*! ./mapfield */ \"./node_modules/protobufjs/src/mapfield.js\"),\n    Service   = __webpack_require__(/*! ./service */ \"./node_modules/protobufjs/src/service.js\"),\n    Message   = __webpack_require__(/*! ./message */ \"./node_modules/protobufjs/src/message.js\"),\n    Reader    = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\"),\n    Writer    = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\"),\n    util      = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\"),\n    encoder   = __webpack_require__(/*! ./encoder */ \"./node_modules/protobufjs/src/encoder.js\"),\n    decoder   = __webpack_require__(/*! ./decoder */ \"./node_modules/protobufjs/src/decoder.js\"),\n    verifier  = __webpack_require__(/*! ./verifier */ \"./node_modules/protobufjs/src/verifier.js\"),\n    converter = __webpack_require__(/*! ./converter */ \"./node_modules/protobufjs/src/converter.js\"),\n    wrappers  = __webpack_require__(/*! ./wrappers */ \"./node_modules/protobufjs/src/wrappers.js\");\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/type.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/types.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/types.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/types.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar roots = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\n\nvar Type, // cyclic\n    Enum;\n\nutil.codegen = __webpack_require__(/*! @protobufjs/codegen */ \"./node_modules/@protobufjs/codegen/index.js\");\nutil.fetch   = __webpack_require__(/*! @protobufjs/fetch */ \"./node_modules/@protobufjs/fetch/index.js\");\nutil.path    = __webpack_require__(/*! @protobufjs/path */ \"./node_modules/@protobufjs/path/index.js\");\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n    if (object) {\n        var keys  = Object.keys(object),\n            array = new Array(keys.length),\n            index = 0;\n        while (index < keys.length)\n            array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n    var object = {},\n        index  = 0;\n    while (index < array.length) {\n        var key = array[index++],\n            val = array[index++];\n        if (val !== undefined)\n            object[key] = val;\n    }\n    return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n    safePropQuoteRe     = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n    return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n    return str.substring(0, 1)\n         + str.substring(1)\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n\n    /* istanbul ignore if */\n    if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n\n    /* istanbul ignore next */\n    if (!Type)\n        Type = __webpack_require__(/*! ./type */ \"./node_modules/protobufjs/src/type.js\");\n\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\n    return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n\n    /* istanbul ignore if */\n    if (object.$type)\n        return object.$type;\n\n    /* istanbul ignore next */\n    if (!Enum)\n        Enum = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\");\n\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n    return enm;\n};\n\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n    function setProp(dst, path, value) {\n        var part = path.shift();\n        if (part === \"__proto__\" || part === \"prototype\") {\n          return dst;\n        }\n        if (path.length > 0) {\n            dst[part] = setProp(dst[part] || {}, path, value);\n        } else {\n            var prevValue = dst[part];\n            if (prevValue)\n                value = [].concat(prevValue).concat(value);\n            dst[part] = value;\n        }\n        return dst;\n    }\n\n    if (typeof dst !== \"object\")\n        throw TypeError(\"dst must be an object\");\n    if (!path)\n        throw TypeError(\"path must be specified\");\n\n    path = path.split(\".\");\n    return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (__webpack_require__(/*! ./root */ \"./node_modules/protobufjs/src/root.js\"))());\n    }\n});\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/util.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof __webpack_require__.g !== \"undefined\"\n                   && __webpack_require__.g\n                   && __webpack_require__.g.process\n                   && __webpack_require__.g.process.versions\n                   && __webpack_require__.g.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && __webpack_require__.g\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/verifier.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/verifier.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = verifier;\n\nvar Enum      = __webpack_require__(/*! ./enum */ \"./node_modules/protobufjs/src/enum.js\"),\n    util      = __webpack_require__(/*! ./util */ \"./node_modules/protobufjs/src/util.js\");\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/verifier.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/wrappers.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/wrappers.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = __webpack_require__(/*! ./message */ \"./node_modules/protobufjs/src/message.js\");\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n             // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].slice(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ?\n                message.$type.fullName.slice(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/wrappers.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./node_modules/ws/browser.js":
/*!************************************!*\
  !*** ./node_modules/ws/browser.js ***!
  \************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n\n\n//# sourceURL=webpack://goplay.ts/./node_modules/ws/browser.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./dist/goplay.js");
/******/ 	
/******/ })()
;